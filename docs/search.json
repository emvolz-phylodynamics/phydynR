[{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/HIV_epidemics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating HIV transmission rates","text":"vignette demonstrate use structured coalescent models (Volz 2012) estimate epidemiological parameters given pathogen genealogy discrete trait information sampled individuals.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/HIV_epidemics.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Estimating HIV transmission rates","text":"tutorial assumes following R packages already installed computer. phydynR: implements coalescent simulation likelihood function phylodynamic analyses. bbmle: tools general likelihood estimation. ggplot2: functions plot demographic process.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/HIV_epidemics.html","id":"load-the-r-packages","dir":"Articles","previous_headings":"Requirements","what":"Load the R packages","title":"Estimating HIV transmission rates","text":"","code":"library(phydynR)   library(bbmle)   library(ggplot2)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/HIV_epidemics.html","id":"the-epidemiological-model","dir":"Articles","previous_headings":"","what":"The epidemiological model","title":"Estimating HIV transmission rates","text":"focus problem estimating HIV transmission rates stage infection assuming know stage infection patients sampled virus sequenced. fit simple model HIV epidemic using ordinary differential equations (ODEs). model, infectious period broken three stages different average duration different transmission rates. first stage, early HIV infection (EHI) short (average duration \\(1/\\gamma_0 = 1\\) year), high transmission rate \\(\\beta_0\\). second stage, chronic HIV infection, long (average duration \\(1/\\gamma_1 = 7\\) years), small transmission rate. last stage, AIDS, lasts \\(1/\\gamma_2 = 2\\) years average intermediate transmission rate. births susceptible state rate \\(bN\\) \\(N = S + I_0 + I_1 + I_2\\). mortality due natural causes states rate \\(\\mu\\). parameter values listed table 1. model equations : \\(\\dot{S} = bN − \\mu S − (\\beta_0I_0 + \\beta_1I_1 + \\beta_2I_2)S/N\\) \\(\\dot{I_0} = (\\beta_0I_0 + \\beta_1I_1 + \\beta_2I_2)S/N − (\\mu + \\gamma_0)I_0\\) \\(\\dot{I_1} = \\gamma_0I_0 − (\\mu + \\gamma_1)I_1\\) \\(\\dot{I_2} = \\gamma_1I_1 − (\\mu + \\gamma_2)I_2\\) Table 1: Parameter symbols values Create list true parameter values: order fit model, need express equations canonical format. According format, tally birth migration events demes. example, deme corresponds stage infection infected host can , refer demes following names: \\(m = 3\\) demes model, birth events demes needs expressed \\(3 × 3\\) matrix F. element \\(F_kl\\) represents rate transmissions host deme \\(k\\) host deme \\(l\\). example, following: element matrix string parsed R code evaluated, important write exactly solving equations outside phydynR. Also note object parms accessible equations, list parameters - may include parameters estimated. Note zero rates 2nd third columns, since new infected hosts start first stage infection (EHI). Also note must give row column names matrix, names must correspond names demes. Similarly, must create matrix migrations: Note matrix tallys stage progression EHI chronic chronic AIDS. must also write vector expressions events terminate lineage – model, occurs due natural AIDS related mortality: Finally, must write vector ODEs state variables correspond demes coalescent model. example, one variable- number susceptibles: Note well cases, expression equation must corresponding name state variable. model can fitted binary tree dated tips. use simulated tree know true parameter values population size time. load : Note well vector sample times must names taxon. state taxon (stage infection sample unit) encoded end taxon name, can loaded automatically passing argument sampleStatesAnnotations. Alternatively, information can passed matrix row names corresponding tip labels tree. setting components mathematical model, can build demographic process using function build.demographic.process phydynR package. dm output can used input coalescent models calculation likelihood. Now can calculate likelihood tree see long takes using system.time function: bit slow, note alternative low-level interface can bit faster (colik.pik.fgy). Also note changing integrationMethod (choose ‘euler’), maxHeight (fit part tree) res (set smaller value) options can dramatically speed calculation cost accuracy. can fit model using bbmle stats4 package.","code":"parms_truth <- list(gamma0 = 1,                      gamma1 = 1/7,                      gamma2 = 1/2,                      mu = 1/30,                      b = 0.036,                      beta0 = 12./10,                      beta1 = 3./100,                      beta2 = 9./100,                      S_0 = 3000,                      I0_0 = 1,                       I1_0 = 0.01,                       I2_0 = 0.01,                      m = 3,                      mm = 1) INFECTEDNAMES <- c('I0', 'I1', 'I2') births <- rbind(c('parms$beta0 * S * I0 / (S + I0 + I1 + I2)', '0', '0'),                 c('parms$beta1 * S * I1 / (S + I0 + I1 + I2)', '0', '0'),                 c('parms$beta2 * S * I2 / (S + I0 + I1 + I2)', '0', '0'))  rownames(births) = colnames(births) <- INFECTEDNAMES migrations <- rbind(c('0', 'parms$gamma0 * I0', '0'),                      c('0', '0', 'parms$gamma1 * I1'),                      c('0', '0', '0'))  rownames(migrations) = colnames(migrations) <- INFECTEDNAMES deaths <- c('parms$mu*I0',             'parms$mu*I1',             'parms$mu*I2 + parms$gamma2 * I2')  names(deaths) <- INFECTEDNAMES nonDemeDynamics <- paste(sep = '',                          '-parms$mu*S + parms$mu*(S + I0 + I1 + I2)',                          '- S * (parms$beta0*I0+parms$beta1*I1+parms$beta2*I2) / (S + I0 + I1 + I2)')  names(nonDemeDynamics) <- 'S' # read the tree tree <- read.tree(system.file('extdata/hivSimulation.nwk', package='phydynR'))  # the sample times are the same, because it is a homochronous sample at 50 years sampleTimes <- rep(50, length(tree$tip.label)) names(sampleTimes) <- tree$tip.label  # create a tree with dated tips and internal nodes, # will infer the sample states from tip labels bdt <- DatedTree(phylo = tree,                   sampleTimes = sampleTimes,                  minEdgeLength = 0.01) bdt #>  #> Phylogenetic tree with 318 tips and 317 internal nodes. #>  #> Tip labels: #>   89_I1, 349_I2, 339_I1, 64_I1, 203_I1, 30_I0, ... #>  #> Rooted; includes branch lengths. dm <- build.demographic.process(births = births,                                 nonDemeDynamics = nonDemeDynamics,                                 migrations = migrations,                                 deaths = deaths,                                 parameterNames = names(parms_truth),                                 rcpp = FALSE,                                 sde = FALSE) print(system.time(print(   colik(tree = bdt,         theta = parms_truth,         demographic.process.model = dm,         x0 = c(I0 = 1, I1 = 0.01, I2 = 0.01, S = parms_truth$S_0),         t0 = 0,         res = 1000,         integrationMethod = 'euler')   )))"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/HIV_epidemics.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"Fitting the model","title":"Estimating HIV transmission rates","text":"focus estimating three transmission rates system along nuisance parameter controls initial conditions, \\(t_0\\), time origin epidemic. assume prior knowledge stage progression rates \\(\\gamma_i\\) mortality rates \\(\\mu\\), susceptible population size \\(S(0)\\). First, create objective function minimized: Note uses log-transformation variables must positive (like rates). can fit model running Note starting optimizer far true parameter values. fitting model real data, recommended try many different starting conditions large range values. optimizer take 10 minutes run, instead load results: can compare fitted model true number infected time, shown Figure 1 Figure 1: actual (points) estimated (lines) number infections time. Black: EHI, Red: chronic, Green: AIDS can calculate confidence interval transmission rates using likelihood profiles: takes long time, load results: see confidence interval covers true value: , can visualize profile (Figure 2). Figure 2: Likelihood profile transmission rate \\(\\beta_0\\) confidence levels. true parameter value indicated vertical red line.","code":"obj_fun <- function(lnbeta0, lnbeta1, lnbeta2, t0){      parms <- parms_truth   parms$beta0 <- exp(lnbeta0)   parms$beta1 <- exp(lnbeta1)   parms$beta2 <- exp(lnbeta2)      mll <- -colik(tree = bdt,                 theta = parms,                 demographic.process.model = dm,                 x0 = c(I0 = 1, I1 = 0.01, I2 = 0.01, S = parms_truth$S_0),                 t0 = 0,                 res = 1000,                 integrationMethod = 'rk4')      # track progress:   print(c(mll, exp(c(lnbeta0, lnbeta1, lnbeta2) ), t0) )   mll } fit <- mle2(obj_fun,             start = list(lnbeta0 = log(0.6),                           lnbeta1 = log(0.2),                           lnbeta2 = log(0.05),                           t0 = 0),             method='Nelder-Mead',              optimizer='optim',             control = list(trace = 6, reltol = 1e-8)) load( system.file('extdata/hivModel0-fit.RData', package='phydynR') )  AIC(fit) #> [1] 4447.468 logLik(fit) #> 'log Lik.' -2219.734 (df=4) coef(fit) #>    lnbeta0    lnbeta1    lnbeta2         t0  #>  0.1772788 -3.3862403 -2.9639203 -1.8339507 exp(coef(fit)) #>    lnbeta0    lnbeta1    lnbeta2         t0  #> 1.19396395 0.03383565 0.05161617 0.15978107 parms <- parms_truth parms[c('beta0', 'beta1', 'beta2', 't0')] <- unname(exp(coef(fit))) parms$t0 <- log(parms$t0) ox <- dm(theta = parms,           x0 = c(I0 = 1, I1 =0.01, I2 = 0.01, S = parms_truth$S_0),           t0 = exp(coef(fit)['t0']),          t1 = bdt$maxSampleTime,           res = 1e3,           integrationMethod='rk4') o <- ox[[5]]  times <- o[,1]  real_data <- cbind(rtimes, rY) rdata <- gather(real_data, \"Demes\", \"I\", I0:I2, factor_key=TRUE)  ggplot(rdata, aes(x = rtimes, y = I)) +   geom_point(aes(col = Demes)) +    scale_colour_manual(values=c(\"black\", \"red\", \"green\")) +   geom_line(data = o, aes(x = time, y = I0), col='black') +   geom_line(data = o, aes(x = time, y = I1), col='red') +   geom_line(data = o, aes(x = time, y = I2), col='green') +   theme_bw() +   theme(element_text(size = 12)) +   xlab(\"Time\") +   ylab(\"Number of infected by stage\") profbeta <- profile(fit,                      which = 1,                      alpha = 0.05,                      std.err = 0.5,                      trace = TRUE,                      tol.newmin = 1 ) load( system.file('extdata/hivModel0-profbeta.RData', package='phydynR') ) c(exp(confint(profbeta )), TrueVal = parms_truth$beta0) #>    2.5 %   97.5 %  TrueVal  #> 1.093873 1.243095 1.200000 #fig.asp sets the height-to-width ratio of the figure  plot(profbeta) abline( v = log( parms_truth$beta0) , col='red')"},{"path":[]},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"HIV Senegal Model","text":"vignette demonstrate estimated transmission rates using HIV genetic sequences Senegal. also provides guidance analysis described Nascimento et al. 2020 carried .analysed HIV-1 sequences subtypes B, C 02_AG. provide snapshot analyses.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"basic-requirements","dir":"Articles","previous_headings":"","what":"Basic requirements","title":"HIV Senegal Model","text":"vignette assumes know basics R following packages already installed: ape: phylogenetic trees; akima: necessary interpolation data (used calculation likelihood phydynR package); BayesianTools: package Bayesian inference; CODA: series tools analze output Markov chain Monte Carlo; devtools: useful installing packages directly github repository; phydynR: implements coalescent simulation likelihood function phylodynamic analysis; treedater: fits molecular clock phylogenetic tree. senegalHIVmodel: contains example data run analysis described tutorial.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"load-the-necessary-packages","dir":"Articles","previous_headings":"Basic requirements","what":"Load the necessary packages:","title":"HIV Senegal Model","text":"","code":"library(ape)   library(akima)   library(BayesianTools)   library(coda)   library(phydynR)   library(treedater)   library(senegalHIVmodel)   library(ggplot2)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"the-model","dir":"Articles","previous_headings":"","what":"The Model","title":"HIV Senegal Model","text":"model fit based structured coalescent models (Volz 2012). models used estimate epidemiological parameters using phylogenetic tree information states tip tree. states discrete-trait information representing sequences. mathematical model 4 different discrete-traits associated genetic sequence: \\(gpf\\) = HIV sample general population – females; \\(gpm\\) = HIV sample general population – males; \\(msm\\) = HIV sample men sex men; \\(src\\) = source sample, HIV samples individuals countries Senegal.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"stage-of-infection","dir":"Articles","previous_headings":"The Model","what":"Stage of infection","title":"HIV Senegal Model","text":"fit HIV epidemic Senegal using ordinary differential equations (ODE) 1 stage infection. means infected individuals die recover infection. model represented \\(\\gamma\\) rate. used 1 stage infection, metadata available Senegal sequences information use determine stage HIV infection time samples collected.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"how-transmissions-were-modelled","dir":"Articles","previous_headings":"The Model","what":"How transmissions were modelled?","title":"HIV Senegal Model","text":"infected \\(msm\\) (\\(I_{msm}\\)) transmit another \\(msm\\) probability \\(p_{msm2msm}\\) infected \\(msm\\) (\\(I_{msm}\\)) transmit \\(gpf\\) probability \\((1 - p_{msm2msm})\\) infected \\(gpf\\) (\\(I_{gpf}\\)) transmit \\(gpm\\) probability \\(p_{gpf2gpm}\\) infected \\(gpf\\) (\\(I_{gpf}\\)) transmit \\(msm\\) probability \\((1 - p_{gpf2gpm})\\) infected \\(gpm\\) also transmit \\(gpf\\). event, used risk ratio male transmit female, fixed \\(1.02\\). parameter \\(male_{x}\\) model. See Figure 1 schematic representation transmission model HIV Senegal. figure \\(gpf\\), \\(gpm\\) \\(msm\\) represent infected individuals. Figure 1: Transmission model HIV Senegal. \\(gpf\\), \\(gpm\\) \\(msm\\) represent infected individuals.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"how-about-hiv-incidence-rate","dir":"Articles","previous_headings":"The Model","what":"How about HIV incidence rate?","title":"HIV Senegal Model","text":"also modeled HIV incidence rate function time (\\(t\\)) \\(msm\\) \\(gp\\) (general population) different spline functions (Eilers Marx 1996), ODEs represented \\(\\lambda(t)\\) \\(\\mu(t)\\), respectively.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"the-source-compartment","dir":"Articles","previous_headings":"The Model","what":"The \\(source\\) compartment","title":"HIV Senegal Model","text":"Finally, model HIV epidemic Senegal, also added additional compartment named “source” (\\(src\\)), represents rate HIV lineages imported Senegal countries. modeled constant effective population size rate two parameters estimated – \\(srcNe\\): effective source population size; \\(import\\) rate. number imported HIV balances number exported HIV, infected \\(src\\) individuals along time represented ODEs.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"the-odes-or-mathematical-model-equations","dir":"Articles","previous_headings":"The Model","what":"The ODEs or mathematical model equations","title":"HIV Senegal Model","text":"Based Figure 1 parameters like estimate, ordinary differential equations (ODEs) model : \\(\\dot{}_{gpf} = male_x \\mu(t) I_{gpm} + (1 - p_{msm2msm}) \\lambda(t) I_{msm} - \\gamma I_{gpf}\\) \\(\\dot{}_{gpm} = p_{gpf2gpm} \\mu(t) I_{gpf} - \\gamma I_{gpm}\\) \\(\\dot{}_{msm} = (1 - p_{gpf2gpm}) \\mu(t) I_{gpf} + p_{msm2msm} \\lambda(t) I_{msm} - \\gamma I_{msm}\\) publication, choose mathematical symbols \\(\\phi\\), \\(p\\), etc make equations nicer. However, simplicity make easier understand meaning parameters, keep values , \\(p_{gpf2gpm}\\), etc.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"how-to-express-the-mathematical-model-in-r","dir":"Articles","previous_headings":"The Model","what":"How to express the mathematical model in R?","title":"HIV Senegal Model","text":"model, interested HIV transmissions \\(gp\\) \\(msm\\) risk group. also remember consider imported HIV, \\(src\\) compartment. Based , \\(gpf\\), \\(gpm\\), \\(msm\\), \\(src\\) demes model, represented vector R : use spline functions determine shape curve transmission rates \\(gp\\) \\(msm\\), provide initial T0 final T1 times simulations. can also go ahead set value stage infection, model just one stage. assume know value. also create list set template parameter values model. can set values think appropriate. Remember majority parameter values list estimated. R, list parameter values can created : Note parameters \\(gpsp0\\), \\(gpsp1\\), \\(gpsp2\\), \\(gpsploc\\) necessary estimate flexible piecewise linear function \\(gp\\) (\\(gpspline\\) R \\(\\mu(t)\\) ODEs). parameters \\(msmsp0\\), \\(msmsp1\\), \\(msmsp2\\), \\(msmsploc\\) necessary estimate flexible piecewise linear function \\(msm\\) risk group (\\(msmspline\\) R \\(\\lambda(t)\\) ODEs). Table 1: Parameter definition, values symbols used R script. also need setup initial conditions model. set arbitrary large number \\(src\\) population.","code":"demes <- c(\"gpm\", \"gpf\", \"msm\", \"src\") T0 <- 1978 T1 <- 2014 GAMMA <- 1/10 THETA <- list(   gpsp0 = 6/10,   gpsp1 = 4/10,   gpsp2 = 1/10,   gpsploc = 1987,   msmsp0 = 4/10,   msmsp1 = 4/10,   msmsp2 = 2/10,   msmsploc = 1995,   maleX = 1.02,   import = 1/20,   srcNe = 20,   gpspline = function( t, parms ){     if (t < T0 ) return( parms$gpsp0 )     if (t > T1) return (parms$gpsp2)     with(parms, pmax(0.025, approx( x = c(T0, gpsploc, T1), y=c(gpsp0, gpsp1, gpsp2) , xout = t, rule = 2)$y) )   },   msmspline  = function( t, parms){     if (t < T0 ) return( parms$msmsp0 )     if (t > T1) return ( parms$msmsp2 )     with(parms, pmax(0.025, approx( x = c(T0, msmsploc, T1), y=c(msmsp0, msmsp1, msmsp2) , xout = t, rule = 2)$y) )   },   pmsm2msm = 0.85,    pgpf2gpm = 0.85,   initmsm = 1,   initgp = 1 ) SRCSIZE <<- 1e5 X0 <- c(gpm = unname(THETA$initgp/2),         gpf = unname(THETA$initgp/2),         msm = unname(THETA$initmsm),         src = SRCSIZE)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"setting-up-the-birth-migration-and-death-rates","dir":"Articles","previous_headings":"The Model > How to express the mathematical model in R?","what":"Setting up the birth, migration and death rates","title":"HIV Senegal Model","text":"calculation births migrations model expressed 4 \\(\\times\\) 4 matrices, represent transmission movement one deme another deme. Lineages also die rate. First, setup components model. can done using setup.model.equations function research compendium.","code":"eqns <- senegalHIVmodel::setup.model.equations(demes) attach(eqns)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"setting-up-the-birth-matrix","dir":"Articles","previous_headings":"The Model > How to express the mathematical model in R?","what":"Setting up the birth matrix","title":"HIV Senegal Model","text":"set birth matrix allow transmissions one deme another deme Figure 1 . Table 2: Illustration allowed transmissions demes.           set transmissions demes, element matrix string passed R code.","code":"births['msm', 'msm'] <- \"parms$msmspline(t, parms) * msm * parms$pmsm2msm\" births['msm', 'gpf'] <- \"parms$msmspline(t, parms) * msm * (1-parms$pmsm2msm)\"  births['gpm', 'gpf'] <- \"parms$gpspline(t, parms) * gpm * parms$maleX\" births['gpf', 'gpm'] <- \"parms$gpspline(t, parms) * gpf * parms$pgpf2gpm\" births['gpf', 'msm'] <- \"parms$gpspline(t, parms) * gpf * (1-parms$pgpf2gpm)\"  # f = (1/2)*(Y^2)/Ne births['src', 'src'] <- \"0.5 * SRCSIZE^2 / parms$srcNe\""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"setting-up-the-migration-matrix","dir":"Articles","previous_headings":"The Model > How to express the mathematical model in R?","what":"Setting up the migration matrix","title":"HIV Senegal Model","text":"Similar birth matrix, also allow migrations \\(gpf\\), \\(gpm\\), \\(msm\\) \\(src\\); \\(src\\) \\(gpf\\), \\(gpm\\), \\(msm\\). modelled constant effective population size. Table 3: Illustration allowed migrations demes.           also set migrations demes element matrix string passed R code.","code":"migs['src', 'gpm'] <- \"parms$import * gpm\" migs['src', 'gpf'] <- \"parms$import * gpf\" migs['src', 'msm'] <- \"parms$import * msm\"  migs['gpm', 'src'] <- \"parms$import * gpm\" migs['gpf', 'src'] <- \"parms$import * gpf\" migs['msm', 'src'] <- \"parms$import * msm\""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"setting-up-the-vector-for-the-death-rates","dir":"Articles","previous_headings":"The Model > How to express the mathematical model in R?","what":"Setting up the vector for the death rates","title":"HIV Senegal Model","text":"Similarly birth migration matrices, also set death rates element string passed R code.","code":"deaths['msm'] <- \"GAMMA * msm\" deaths['gpf'] <- \"GAMMA * gpf\" deaths['gpm'] <- \"GAMMA * gpm\" deaths['src'] <- \"0.5 * SRCSIZE^2 / parms$srcNe\""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"the-demographic-model","dir":"Articles","previous_headings":"The Model > How to express the mathematical model in R?","what":"The demographic model","title":"HIV Senegal Model","text":"setting components mathematical model, can build demographic process using function build.demographic.process phydynR package. dm output can used input coalescent models calculation likelihood, fitting model using Markov chain Monte Carlo (MCMC), example. information input data build.demographic.process function, see R documentation using command ?phydynR::build.demographic.process.","code":"dm <- build.demographic.process(births = births,                                 deaths = deaths,                                 migrations = migs,                                 parameterNames = names(THETA),                                 rcpp = FALSE,                                 sde = FALSE)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"load-additional-data","dir":"Articles","previous_headings":"The Model","what":"Load additional data","title":"HIV Senegal Model","text":"setting equations model way R can understand, model can now fitted binary dated phylogenetic tree. specific case, estimated maximum likelihood trees using RAxML-NG subtype, analyzed HIV-1 subtypes B, C 02_AG. tree relaxed clock fitted using R package treedater. , trees merged single tree using R script merge_trees.R. final tree contain sequences children, risk group sex NA (available). load binary dated tree R using following: , load information metadata. aims create discrete-trait data tips phylogenetic tree. Remember discrete-trait data model gpf, gpm, msm, src. First need read R metadata : organizing metadata, organize way R package phydynR understand . , create matrix receive information states (discrete-traits) tip tree Now, need read estimated times (calendar units) sequence phylogenetic tree Finally, can create object DatedTree [phydynR package]. tree used calculation likelihood estimate parameter values using phydynR","code":"tree.all <- read.tree(   system.file(\"data/bindTree_CGR_GTR+Gp12+3_droppedTip.tre\",    package = \"senegalHIVmodel\")) # Metadata that will be used in our model for the CGR (close global reference)  # sequences and for sequences from Senegal. # CGRs are referred in the mathematical model as src (source) data # src are HIV sequences that are from other countries and not from Senegal  # the 1st column is the sequence names # the 2nd column is the state (gpf, gpm, msm, or src) of each sequence all_data <- readRDS(system.file(\"data/states.RDS\", package = \"senegalHIVmodel\")) gpm <- gpf <- msm <- src <- rep(0, length(tree.all$tip.label))  # Adds 1 to where states matches \"gpm\", and so on. gpm[all_data$States == \"gpm\"] <- 1 gpf[all_data$States == \"gpf\"] <- 1 msm[all_data$States == \"msm\"] <- 1 src[all_data$States == \"src\"] <- 1  sampleStates <- cbind(gpm, gpf, msm, src) rownames(sampleStates) <- all_data$tip.name times <- readRDS(   system.file(\"data/bindTree_CGR_GTR+Gp12+3_droppedTip_sts.RDS\",   package = \"senegalHIVmodel\")) dated.tree <- phydynR::DatedTree(phylo = tree.all,                                  sampleTimes = times,                                  sampleStates = sampleStates,                                  minEdgeLength = 2/52,                                  tol = 0.1)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"calculation-of-the-likelihood","dir":"Articles","previous_headings":"","what":"Calculation of the likelihood","title":"HIV Senegal Model","text":"setting mathematical model data, following: dated.tree = phylogenetic tree class DatedTree THETA = template parameter values dm = demographic process X0 = initial conditions objects used calculation likelihood using phydynR::colik function. Note calculation likelihood can provide value maximum height maxHeight. parameter “tells” function point back time calculation likelihood done. computer resources problem, can leave default. Using whole tree calculation likelihood can make slower using just portion back time. Senegal data, used maxHeight = 35. means go back time tree approximately 1979. merely chosen put HIV epidemics Senegal around time, estimation parameters model.","code":"phydynR::colik(tree = dated.tree,                theta = THETA,                demographic.process.model = dm,                x0 = X0,                t0 = 1978,                res = 1e3,                timeOfOriginBoundaryCondition = FALSE,                AgtY_penalty = 1,                maxHeight = 35)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"estimation-of-epidemiological-parameters","dir":"Articles","previous_headings":"","what":"Estimation of epidemiological parameters","title":"HIV Senegal Model","text":"Now happy everything, ready estimate parameters model. Senegal HIV model, chose estimate parameters using Markov chain Monte Carlo (MCMC) implemented R package BayesianTools.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"which-parameters-to-estimate","dir":"Articles","previous_headings":"Estimation of epidemiological parameters","what":"Which parameters to estimate?","title":"HIV Senegal Model","text":"example, decided estimate following parameters: Parameters estimating spline function gp: gpsp0 gpsp1 gpsp2 gpsploc Parameters estimating spline function msm: msmsp0 msmsp1 msmsp2 msmsploc Parameters controls src: import srcNe Probability certain events occur: pmsm2msm pgpf2gpm maleX Parameters estimate initial population size: initmsm (initial number individuals msm population) initgp (initial number individuals gp population)","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"estimating-the-parameters","dir":"Articles","previous_headings":"Estimation of epidemiological parameters","what":"Estimating the parameters","title":"HIV Senegal Model","text":"estimate parameters set object function. object function receive proposals MCMC. reason using object function make easier change values parameters estimated THETA (parameter template explained ). Note parameters listed THETA estimated; stay fixed predifined values. can now estimate parameters using MCMC. need decide priors – best knowledge parameter value data analysed – parameter estimated. using BayesianTools R package, need specify density function (represents prior) parameter : Now, can provide sampler, optional, described BayesianTools package, : setting densities sampler functions can now set prior using following: now ready estimate parameter values using MCMC. chose DEzs sampler. DEzs stands Differential-Evolution MCMC zs beyond cover vignette. However, can check Ter Braak Vrugt (2008) information. First, run MCMC ca. 10,000 iterations. checking traces decided ok, can use initial run provided z-matrix explained . Note beyond scope vignette explain Markov chain Monte Carlo (MCMC), can read tutorial. Note iterations parameter take long time run. Now can use results obtained previous run create another run time providing Zmatrix : MCMC take run, instead load results: can plot traces:  can remove first initial 5,000 iter burnin get ESS (effective sample size). can see ESS values greater 200 parameters.","code":"obj_fun <- function(parameters){   # we use unname here because \"parameters\" can be as vectors or matrix, and   # sometimes it comes with column names, which I chose to remove these column names   # in here.   parameters <- unname(parameters)    # add the values of THETA to a new variable named THETA.new   THETA.new <- THETA    # change the values in THETA.new to the new proposals that will be evaluated   THETA.new$gpsp0 <- parameters[1]   THETA.new$gpsp1 <- parameters[2]   THETA.new$gpsp2 <- parameters[3]   THETA.new$gpsploc <- parameters[4]   THETA.new$msmsp0 <- parameters[5]   THETA.new$msmsp1 <- parameters[6]   THETA.new$msmsp2 <- parameters[7]   THETA.new$msmsploc <- parameters[8]   THETA.new$maleX <- parameters[9]   THETA.new$import <- parameters[10]   THETA.new$srcNe <- parameters[11]   THETA.new$pmsm2msm <- parameters[12]   THETA.new$pgpf2gpm <- parameters[13]   THETA.new$initmsm <- parameters[14]   THETA.new$initgp <- parameters[15]      # X0 is the initial conditions for the 4 demes (gpf, gpm, msm, src)   X0 <- c(gpm = unname(THETA.new$initgp/2),           gpf = unname(THETA.new$initgp/2),           msm = unname(THETA.new$initmsm) ,           src = 1e5)    # After changing the parameter values to the new proposals, a likelihood is   # calculated with the function phydynR::colik.   # Note that this function uses several global variables, such as, dated.tree,    # dm, and X0   mll <- colik(tree = dated.tree,                theta = THETA.new,                demographic.process.model = dm,                x0 = X0,                t0 = 1978,                res = 1e3, #TODO                timeOfOriginBoundaryCondition = FALSE,                AgtY_penalty = 1,                maxHeight = 35)    return(mll)  } # Specify a density function to be used in the  # prior specification (see below) densities <-  function(par){   # d1 to d3 and d5 to d7 I am using a lognormal distribution with mean = R0 = 1.1 and sigma = 1   # d4 and d8 uniform distribution between the start time and the most recent sample   # d10 exponential distribution with mean around 30   # d11 exponential distribution with mean around 1/100   d1 = dgamma(par[1], shape = 3, rate = 3/0.1, log = TRUE) #gpsp0   d2 = dgamma(par[2], shape = 3, rate = 3/0.1, log = TRUE) #gpsp1   d3 = dgamma(par[3], shape = 3, rate = 3/0.1, log = TRUE) #gpsp2   d4 = dunif(par[4], min = 1978, max = 2014, log = TRUE) #gpsploc   d5 = dgamma(par[5], shape = 3, rate = 3/0.1, log = TRUE) #msmsp0   d6 = dgamma(par[6], shape = 3, rate = 3/0.1, log = TRUE) #msmsp1   d7 = dgamma(par[7], shape = 3, rate = 3/0.1, log = TRUE) #msmsp2   d8 = dunif(par[8], min = 1978, max = 2014, log = TRUE) #msmsploc   d9 = dunif(par[9], min = 0.5, max = 2.0, log = TRUE) #maleX   d10 = dexp(par[10], rate = 30, log = TRUE) #import   d11 = dexp(par[11], rate = 1/100, log = TRUE) #srcNe   d12 = dbeta(par[12], shape1 = 16, shape2 = 4, log = TRUE) #pmsm2msm   d13 = dbeta(par[13], shape1 = 16, shape2 = 4, log = TRUE) #pgpf2gpm   d14 = dexp(par[14], rate = 1/3, log = TRUE) #initmsm   d15 = dexp(par[15], rate = 1/3, log = TRUE) #initgp      return(d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12 + d13 + d14 + d15) } # Create sampling, this is optional.  # However, if a sampler function is not provided, the user will have to provide # explicit starting values for for many of the MCMC sampler sampler <-  function(n=1){   d1 = rgamma(n, shape = 4, rate = 4/0.6) #gpsp0   d2 = rgamma(n, shape = 4, rate = 4/0.4) #gpsp1   d3 = rgamma(n, shape = 4, rate = 4/0.1) #gpsp2   d4 = runif(n, min = 1985, max = 2000) #gpsploc   d5 = rgamma(n, shape = 4, rate = 4/0.4) #msmsp0   d6 = rgamma(n, shape = 4, rate = 4/0.4) #msmsp1   d7 = rgamma(n, shape = 4, rate = 4/0.2) #msmsp2   d8 = runif(n, min = 1985, max = 2005) #msmsploc   d9 = runif(n, min = 0.5, max = 2.0) #maleX   d10 = runif(n, 1/40, 1/5) #import   d11 = runif(n, 5, 1000) #srcNe   d12 = rbeta(n, shape1 = 16, shape2 = 4) #pmsm2msm   d13 = rbeta(n, shape1 = 16, shape2 = 4) #pgpf2gpm   d14 = runif(n, 1, 3) #initmsm   d15 = runif(n, 1, 3) #initgp      return(cbind(d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15)) } # Create prior (necessary for the BayesianTools package) prior <- createPrior(density = densities,                      sampler = sampler,                      lower = c(0.05, 0.05, 0.05, 1978,                                 0.05, 0.05, 0.05, 1978,                                 0.5, 0, 1, 0, 0, 1, 1),                      upper = c(1, 1, 1, 2014,                                 1, 1, 1, 2014,                                 2, 0.30, 5000, 1,                                 1, 300, 300)) settings = list(iterations = 10000, nrChains = 1, thin = 1) # Create bayesianSetup bayesianSetup <- createBayesianSetup(likelihood = obj_fun , prior = prior) # you do not need to run this part as it will take a while to run # run the MCMC #out <- BayesianTools::runMCMC(bayesianSetup = bayesianSetup,  #                              sampler = \"DEzs\",  #                              settings = settings) # Get an ok sample (the run above is not good, however it can provide a good Z matrix) # For more information on this: https://github.com/florianhartig/BayesianTools/issues/79  #read previous run out <- readRDS(system.file(\"data/MCMC_example/out_results.RDS\",                             package = \"senegalHIVmodel\")) x <- BayesianTools::getSample(out, start = 2000)  # Get the range for the parameter estimates for the previous run rangePost = apply(x, 2, range)  #get unique values of x u_x <- unique(x)  #cretae new Z matrix based on previous run # now I am estimating 15 parameters (hence ncol=15) newZ = matrix(runif(1800, rangePost[1,], rangePost[2,]), ncol = 15, byrow = T)   # Because I will run several analysis in parallel, and to avoid the initial values to be identical # I will provide as argument position 1 (pos1), position 2 (pos2), and position 3 (pos3) # from the unique values of x (u_x) pos1 = 72 pos2 = 73 pos3 = 74 iter = 80000 # number of iterations settings = list(Z = newZ,                  startValue =  u_x[c(pos1, pos2, pos3), ],                  nrChains = 1,                  iterations = iter,                  thin = 1)   # Create bayesianSetup # Here we will take advantage of the parallel option. #bayesianSetup <- createBayesianSetup(likelihood = obj_fun,  #                                     prior = prior,  #                                     parallel = 3)  #Note that this will take a while to run as well #outZ <- runMCMC(bayesianSetup = bayesianSetup,  sampler = \"DEzs\", settings = settings ) #stopParallel(bayesianSetup) outZ <- readRDS(system.file(\"data/MCMC_example/outZ_results.RDS\",                             package = \"senegalHIVmodel\")) #par(\"mar\") par(mar=c(1,5,5,1))  #here we will plot just the 4 initial parameters for the linear function #representing the transmission rates for the general population #save than upload figure plot(outZ, whichParameters = c(1:4)) out_sample <- BayesianTools::getSample(outZ, start = 5000, coda = TRUE)  # ESS value for all parameters coda::effectiveSize(out_sample) #>    par 1    par 2    par 3    par 4    par 5    par 6    par 7    par 8  #> 788.3901 512.8582 609.3268 569.5006 478.9808 496.5276 498.5685 428.6407  #>    par 9   par 10   par 11   par 12   par 13   par 14   par 15  #> 737.4058 700.1792 692.8029 565.6878 575.4979 540.1259 634.3283"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"estimating-effective-number-of-infections","dir":"Articles","previous_headings":"Estimation of epidemiological parameters","what":"Estimating effective number of infections","title":"HIV Senegal Model","text":"can now estimate plot effective number infections time \\(gpf\\), \\(gpm\\) \\(msm\\). , sample 100 combination parameter values posterior distribution. paper published, sampled 1000 combination parameter values. combination parameter values posterior distributions, solve demographic process dm function created beginning tutorial. use function post_traj_mx R package senegalHIVmodel. look function, see solving dm combination parameter value posterior distribution. can now load solved demographic process 100 samples posterior distribution. Note paper, used 1,000 samples posterior distribution. Now, can solve demographic process function maximum posteriori (MAP). solving demographic model combination parameter value, can use function senegalHIVmodel::df_sizes_prop get proportion \\(gpm\\), \\(gpf\\) \\(msm\\) effective population size, 4th element solved demographic process. can plot proportion \\(gpf\\), \\(gpm\\) \\(msm\\).","code":"out_sample <- BayesianTools::getSample(outZ, start = 5000, coda = FALSE)    # sample n combination of parameters from the posterior   # here we will use only a size = 10 samples to make it faster to run   # in the paper, we used size = 1,000 samples from the posterior probability   run.n <- out_sample[sample(nrow(out_sample), size = 10, replace = FALSE), ]      # solve the demographic model for 100 combination of parameter values   # that was sampled from the posterior probability   run_o.n <- do.call(\"cbind\", apply(run.n, 1, senegalHIVmodel::post_traj_mx, THETA)) run_o.n <- readRDS(system.file(\"data/solved_dm.RDS\", package = \"senegalHIVmodel\")) #then we will fo the same for the MAP (maximum a posteriori value)   run_map <- BayesianTools::MAP(outZ, start = 5000)$parametersMAP      # solve the demographic model for MAP    run_map_o <- senegalHIVmodel::post_traj_mx(parameters = run_map, THETA = THETA) # Note that the element 4 in the sizes in the solved demographic function eff_sizes <- senegalHIVmodel::df_sizes_prop(sizes.p = run_o.n[4,],                                             sizes.map = run_map_o[4],                                             times = run_o.n[[1]],                                             Nrep = 100,                                              Ntime = 1000)  ggplot(data = eff_sizes, aes(x = times))  +   geom_ribbon(aes(ymin = lower, ymax = upper, fill = group), alpha = 0.70) +   geom_line(aes(y = median, colour = group, linetype = \"solid\")) +   geom_line(aes(y = MAP, colour = group, linetype = \"dashed\")) +   facet_wrap( ~ group) +   ggtitle(\"All subtypes\") +   ylab(\"Effective number of infections (proportion)\") +   xlab(\"Time (years)\") +   scale_fill_brewer() + scale_colour_brewer() + theme_bw() +   theme(legend.position=\"bottom\", text = element_text(size = 14)) +   scale_linetype_manual(labels = c('MAP', \"Median\"), values = c(\"dashed\", \"solid\"))"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/SenegalHIVmodel.html","id":"estimating-the-reproduction-number-r_0","dir":"Articles","previous_headings":"Estimation of epidemiological parameters","what":"Estimating the reproduction number (\\(R_0\\))","title":"HIV Senegal Model","text":"can calculate \\((R_0)\\) model using equations \\(\\mu(t)/\\gamma\\) \\(gp\\) \\(\\lambda(t)/\\gamma\\) \\(msm\\). Note \\(\\mu(t)\\) \\(\\lambda(t)\\) transmission rates time \\(gp\\) \\(msm\\), respectively, estimated MCMC. can use function senegalHIVmodel::df_r0. function basically estimate transmission rate group (\\(gp\\) \\(msm\\)) solving function \\(\\mu(t)\\) \\(\\lambda(t)\\) described THETA (). estimate \\((R_0)\\) described . can look median credible interval \\(R_0\\) \\(gp\\) \\(msm\\) 2014. Note values obtained might match exactly described paper. tested many different models run MCMC longer.","code":"# These are the values used for the simulations # Initial time for simulations T0 <- 1978 # Final time for simulations T1 <- 2014 # Duration of infection. In our model we assumed 1 stage of infection GAMMA <- 1/10  times <- seq(1978, 2014, length.out = 1000)  all_subtypes <- df_r0(run = outZ,                       burnin = 5000,                       par_names = c(\"gpsp0\", \"gpsp1\", \"gpsp2\", \"gpsploc\",                                     \"msmsp0\", \"msmsp1\", \"msmsp2\", \"msmsploc\",                                     \"maleX\", \"import\", \"srcNe\",                                     \"pmsm2msm\", \"pgpf2gpm\",                                     \"initmsm\", \"initgp\"),                       times = times,                       T0 = T0,                       T1 = T1,                       GAMMA = GAMMA) #for gp all_subtypes[1000,] #>      times   median     lower    upper group MAP #> 1000  2014 1.499884 0.8357501 2.444434    gp 1.4  #for msm all_subtypes[2000,] #>      times   median     lower    upper group  MAP #> 2000  2014 0.987994 0.5305526 2.142065   msm 0.59"},{"path":[]},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/phydynR.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate genealogies using exponential growth","text":"tutorial use phydynR simulate genealogies using expontial growth inder birth /death rate.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/phydynR.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Simulate genealogies using exponential growth","text":"tutorial assumes following R packages already installed computer. phydynR: implements coalescent simulation likelihood function phylodynamic analyses. bbmle: tools general likelihood estimation.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/phydynR.html","id":"load-the-r-packages","dir":"Articles","previous_headings":"Requirements","what":"Load the R packages","title":"Simulate genealogies using exponential growth","text":"","code":"library(phydynR)   library(bbmle)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/phydynR.html","id":"the-epidemiological-model","dir":"Articles","previous_headings":"","what":"The epidemiological model","title":"Simulate genealogies using exponential growth","text":"Let’s model population growing exponentially fixed per-capita birth rate beta death rate gamma. ’ve defined model, can simulate trajectories simulate genealogies sampling lineages specific times. Finally, see infer birth /death rates tree observed (e.g. reconstructed genetic sequence data). First, let’s define rates: rates specified named vector strings; names correspond names demes (case). strings interpreted R expressions, written just write R code. keyword parms appears rate equations list parameters, can set see . Now build demographic process like : Note following: must specify names parameters appear parms; sde option allows specify model stochastic (stochastic differential equations) deterministic (ordinary differential equations); rcpp option says equations written R code C code; used R code case. model specified, can simulate visualize trajectories:  variables t0 t1 determine time limits integration. x0 provides named vector initial condition; note well names must correspond used specify rates. theta synonym parms provides parameter list. can also directly simulate model using integrationMethod based ODE solver specifies method use (e.g. euler adams). res number time steps use; larger values accurate expense computation. can alternatively specify equations C code, case model compiled using Rcpp package. case, simulating model fast, take seconds compile model. Let’s compile deterministic version model: Note use C code, parms keyword used. Now let’s simulate coalescent tree conditioning demographic process: self-explanatory except sampleTimes argument, required. specifies times relative t0 lineage sampled. length vector determines sample size. can named vector, case taxon labels retained returned tree. returned tree DatedTree object subclass ape::phylo. , functions ape package also work simulated tree. Let’s plot :  Finally, see compute likelihood parameters describing demographic process given tree data. colik function can used compute likelihood, model fitting can done variety ways. Bayesian analysis done using mcmc package, maximum likelihood can done using bbmle package. Note returns log likelihood. example invocation likelihood function using simulated tree data: Note following options: tre DatedTree object fit ; x0 initial conditions demographic process; t0 time origin process; choose value occurs root tree; res number time steps used demographic process; timeOfOriginBoundaryCondition (default FALSE) : TRUE, function returns -Inf time origin occurs root tree; AgtYboundaryCondition (default TRUE) : TRUE, function returns -Inf number extant lineages tree less simulated population size; usually left TRUE.","code":"# Define the birth rate births <- c(I = 'parms$beta * I') # Define the death rate deaths <- c(I = 'parms$gamma * I') dm <- build.demographic.process(births = births,                                 deaths = deaths,                                 parameterNames = c('beta', 'gamma'),                                 rcpp = FALSE,                                 sde = TRUE) show.demographic.process( demo.model = dm,                           theta = list( beta = 1.5, gamma = 1 ),                           x0  = c( I = 1 ),                           t0 = 0,                           t1 = 10) dm(theta = list( beta = 1.5, gamma = 1 ),    x0 = c( I = 1) ,    t0 = 0,    t1 = 10,    res = 1000,     integrationMethod = 'adams') dm.det <- build.demographic.process(births = c(I = 'beta * I'),                                     deaths = c(I = 'gamma * I'),                                     parameterNames=c('beta', 'gamma'),                                     rcpp = TRUE,                                     sde = FALSE) ## [1] \"Fri Oct 11 14:18:26 2024 Compiling model...\" ## [1] \"Fri Oct 11 14:18:30 2024 Model complete\" tre <- sim.co.tree( theta = list( beta = 1.5, gamma = 1 ),                     demographic.process.model = dm.det,                     x0  = c(I = 1 ),                     t0 = 0,                     sampleTimes = seq(10, 15, length.out = 50),                     res = 1000) plot(ladderize( tre )) colik(tree = tre,       theta = list( beta = 1.5, gamma = 1),       demographic.process.model = dm.det,       x0 = c( I = 1 ),       t0 = -1,       res = 1e3,       timeOfOriginBoundaryCondition = FALSE) ## [1] -216.1359"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/phydynR.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"Fitting the model","title":"Simulate genealogies using exponential growth","text":"fit model using maximum likelihood approach. focus estimating transmission rate beta initial size \\(\\). assume prior knowledge death rate \\(\\gamma\\). First, create objective function minimized: Note uses log-transformation variables must positive (like rates population sizes). can fit model running Note following options: start contains starting conditions parameters like estimate; control list options optim; see ?optim information. fit take little run, load results using can see results running","code":"obj_fun <- function(lnbeta, lniniI){      beta <- exp(lnbeta)   I0 <- exp(lniniI)      parms <- list(beta = beta,                  I = I0,                  gamma = 1,                  t0 = -1)         mll <- -colik(tre,                 theta = parms,                 dm.det,                 x0 = c(I = 1),                 t0 = parms$t0,                 res = 1000)      # track progress:   print(paste(mll, beta, I0))   mll } fit <- mle2(obj_fun,             start = list(lnbeta = log(2), lniniI = log(1)),             method='Nelder-Mead',              optimizer='optim',             control = list(trace = 6, reltol = 1e-8)) AIC(fit) ## [1] 421.3335 logLik(fit) ## 'log Lik.' -208.6667 (df=2) #contains the parameter estimates coef(fit) ##    lnbeta    lniniI  ## 0.3704748 0.3161767 exp(coef(fit)) ##   lnbeta   lniniI  ## 1.448422 1.371873"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/simulate_genealogies.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating genealogies with an epidemiological coalescent model","text":"vignette demonstrate build models phydynR simulate genealogies using structured coalescent. use simple deterministic stochastic HIV models infected hosts progress several stages infection characterized different transmission rates.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/simulate_genealogies.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Simulating genealogies with an epidemiological coalescent model","text":"tutorial assumes following R packages already installed computer. phydynR: implements coalescent simulation likelihood function phylodynamic analyses.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/simulate_genealogies.html","id":"load-the-r-packages","dir":"Articles","previous_headings":"Requirements","what":"Load the R packages","title":"Simulating genealogies with an epidemiological coalescent model","text":"","code":"library(phydynR)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/simulate_genealogies.html","id":"the-epidemiological-model","dir":"Articles","previous_headings":"","what":"The epidemiological model","title":"Simulating genealogies with an epidemiological coalescent model","text":"First consider simple model HIV epidemic using ordinary differential equations (ODEs). model, infectious period broken three stages different average duration different transmission rates. first stage, early HIV infection (EHI) short (average duration \\(1/\\gamma_0 = 1\\) year), high transmission rate \\(\\beta_0\\). second stage, chronic HIV infection, long (average duration \\(1/\\gamma_1 = 7\\) years), small transmission rate. last stage, AIDS, lasts \\(1/\\gamma_2 = 2\\) years average intermediate transmission rate. births susceptible state rate \\(bN\\) \\(N = S+I_0+I_1+I_2\\). mortality due natural causes states rate \\(\\mu\\). parameter values listed Table 1. model equations follows: \\(\\dot{S} = bN − \\mu S − (\\beta_0I_0 + \\beta_1I_1 + \\beta_2I_2)S/N\\) \\(\\dot{I_0} = (\\beta_0I_0 + \\beta_1I_1 + \\beta_2I_2)S/N − (\\mu + \\gamma_0)I_0\\) \\(\\dot{I_1} = \\gamma_0I_0 − (\\mu + \\gamma_1)I_1\\) \\(\\dot{I_2} = \\gamma_1I_1 − (\\mu + \\gamma_2)I_2\\) Table 1: Parameter symbols values Now need build model format can understood phydynR package used simulate trees. , use build.demographic.process function. first need express equations canonical format. According format, tally birth migration events demes. example, deme corresponds stage infection infected host can , refer demes following names: \\(m = 3\\) demes model, birth events demes needs expressed 3 × 3 matrix F. element \\(F_kl\\) represents rate transmissions host deme \\(k\\) host deme \\(l\\). example, following: element matrix string parsed C++ code evaluated using Rcpp package, important write exactly solving equations C++. case, parameters (beta, gamma, etc) automatically made available. recommended way write model, since compilation, simulation model fast. Alternatively, express equations R expressions, case parameters available list called parms. example: Note zero rates 2nd third columns, since new infected hosts start first stage infection (EHI). Also note must give row column names matrix, names must correspond names demes. Similarly, must create matrix migrations: Note matrix tallys stage progression EHI chronic chronic AIDS. must also write vector expressions events terminate lineage – model, occurs due natural AIDS related mortality: Finally, must write vector rates state variables correspond demes coalescent model. example, one variable - number susceptibles: Note well cases, expression equation must corresponding name state variable. Now can construct demographic process: creates model (“demo.model”) parsing equations provided births, migrations, etc. Note also must provide names parameters needed compiling model. Two options allow user customize type model created: rcpp: TRUE, equations interpreted C++ code compiled using Rcpp inline packages. Compilation slow, simulating model much faster. FALSE, equations interpreted R expressions. pre-compilation step, simulation much slower. approach added flexibility, since nonscalar parameters (even R functions) can made available equations parms object. sde: TRUE, model treat equations rates within system stochastic differential equations solved using Euler method. FALSE, equations treated ODEs solved using deSolve package. Now can simulate demographic process using theta named vector parameters x0 named vector initial conditions, e.g. I0, I1, I2 S t0 t1 scalar times process initiated terminated res provides time resolution process, also corresponds timestep solving SDEs. Larger values generally provide accurate approximation, slower solving ODEs, integrationMethod parameter selects method used deSolve package. Note well alternative using build.demographic.process function manually construct demo.model function. may good alternative model highly complex optimize simulation time. return value function list four elements: length \\(m\\) vector giving time simulated output list length res; element \\(m × m\\) matrix computed birth rates corresponding element times list length res; element \\(m × m\\) matrix computed migration rates list length res; element length \\(m\\) vector population size within deme. Let’s pick parameters initial conditions: Note first stage infection much higher transmission rate subsequent stages. can easily visualize model:  Additional graphical parameters may passed plot function. Now simulate tree, must specify time lineage sampled, state lineage time sampling. Let’s create vector uniformly spaced sample times: states lineages specified form \\(n × m\\) matrix, element \\((,j)\\) corresponding probability lineage \\(\\) deme \\(j\\) sampled. Let’s construct matrix using multinomial sampling, samples chronic infection, sampled first stage: Now can simulate tree: return value DatedTree object, derived ape::phylo. Consequently, convenience functions ape::phylo also work:","code":"INFECTEDNAMES <- c('I0', 'I1', 'I2') births <- rbind(c('beta0 * S * I0 / (S + I0 + I1 + I2)', '0', '0'),                 c('beta1 * S * I1 / (S + I0 + I1 + I2)', '0', '0'),                 c('beta2 * S * I2 / (S + I0 + I1 + I2)', '0', '0'))  rownames(births) = colnames(births) <- INFECTEDNAMES # births <- rbind(c('parms$beta0 * S * I0 / (S + I0 + I1 + I2)', '0', '0'), #                 c('parms$beta1 * S * I1 / (S + I0 + I1 + I2)', '0', '0'), #                 c('parms$beta2 * S * I2 / (S + I0 + I1 + I2)', '0', '0')) migrations <- rbind(c('0', 'gamma0 * I0', '0'),                     c('0', '0', 'gamma1 * I1'),                     c('0', '0', '0'))  rownames(migrations) = colnames(migrations) <- INFECTEDNAMES deaths <- c('mu * I0',             'mu * I1',             'mu * I2 + gamma2 * I2')  names(deaths) <- INFECTEDNAMES nonDemeDynamics <- c( S = '-mu * S + mu * (S + I0 + I1 + I2) - S * (beta0 * I0 + beta1 * I1 + beta2 * I2) / (S + I0 + I1 + I2)') demo.model <- build.demographic.process(births,                                         nonDemeDynamics,                                         migrations = migrations,                                         deaths = deaths,                                         parameterNames = c('beta0', 'beta1',                                                            'beta2', 'gamma0',                                                            'gamma1', 'gamma2',                                                            'mu'),                                         rcpp = TRUE,                                          sde = TRUE) #> [1] \"Fri Oct 11 14:19:16 2024 Compiling model...\" #> [1] \"Fri Oct 11 14:19:21 2024 Model complete\" class(demo.model) #> [1] \"demographic.process\" \"function\" # demo.model(theta, x0, t0, t1, res = 1e3, integrationMethod = 'adams') theta <- c(gamma0 = 1,            gamma1 = 1/7,            gamma2 = 1/2,            mu = 1/30,            beta0 = 12./10,            beta1=3./100,            beta2=9./100)  t0 <- 0 t1 <- 50 x0 <- c(S = 999, I0 = 1, I1 = 0.1, I2 = 0.1) show.demographic.process(demo.model,                           theta,                           x0,                           t0,                           t1,                           legend_position = \"topright\") n <- 100 sampleTimes <- seq(15, 25, length.out = n) sampleStates <- t(rmultinom( n, size = 1, prob = c(0.025, 0.9, 0.075) ))  head(sampleStates) #>      [,1] [,2] [,3] #> [1,]    0    1    0 #> [2,]    0    1    0 #> [3,]    0    1    0 #> [4,]    0    1    0 #> [5,]    0    1    0 #> [6,]    0    1    0 tree <- sim.co.tree (theta,                       demo.model,                       x0,                       t0,                       sampleTimes,                       sampleStates,                       res = 1e3) tree #>  #> Phylogenetic tree with 100 tips and 99 internal nodes. #>  #> Tip labels: #>   simt_4, simt_71, simt_6, simt_63, simt_74, simt_61, ... #>  #> Rooted; includes branch lengths. # Plot the phylogenetic tree plot.phylo(tree) # Plot lineages through time from a phylogenetic tree ltt.plot(tree)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/sir_model.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Estimating transmission rate using the SIR model","text":"vignette demonstrate use coalescent models described (Volz 2012) estimate transmission rate parameters given pathogen genealogy.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/sir_model.html","id":"basic-requirements","dir":"Articles","previous_headings":"","what":"Basic requirements","title":"Estimating transmission rate using the SIR model","text":"vignette assumes following packages already installed: rjson: Converts R objects JSON objects vice-versa. phydynR: implements coalescent simulation likelihood function phylodynamics analysis ggplot2: functions plot demographic process.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/sir_model.html","id":"load-the-necessary-packages","dir":"Articles","previous_headings":"Basic requirements","what":"Load the necessary packages:","title":"Estimating transmission rate using the SIR model","text":"Suppose epidemic occurs according density-dependent susceptible- infected-recovered (SIR) process, given infected individual generates new infection rate \\(\\beta SI\\), \\(S\\) number susceptible \\(\\beta\\) transmission rate. Furthermore, infected individuals removed population per capita rate \\(\\gamma\\). single point time, random sample \\(n = 75\\) infected individuals taken genealogy reconstructed history transmissions. simulated dataset using MASTER 1.10 (Vaughan Drummond 2013), can loaded , epidemic trajectory information can loaded true parameter values given table 1. file used simulate data MASTER can viewed directly openning xml file. Table 1: Parameter symbols values fit simple ordinary differential equation (ODE) model genealogy: \\(\\dot{S} = -\\beta SI\\) \\(\\dot{} = \\beta SI -\\gamma \\) Relevant parameters system transmission rate \\(\\beta\\), recovery rate \\(\\gamma\\), initial population size \\(S(0)\\) initial number infected \\((0)\\). parameters identifiable data, assume prior knowledge \\(S(0)\\) \\(\\gamma\\) focus estimating \\(\\beta\\) nuisance parameter \\((0)\\). Note imprecise estimate \\(S(0)\\) also possible. Create list store true parameter values: Note true value R0 \\(\\beta S(0)/\\gamma = 2\\). , create tree dated tips internal nodes: Note vector sample times must names corresponding taxon labels tree. order fit model, need express equations canonical format: births vector gives total rate infected generate new infections deaths gives rate lineages terminated. nonDemeDynamics vector gives equations state variables directly involved genealogy (e.g. pathogen never occupies susceptible host definition). element vectors string parsed R code evaluated, important write exactly solving equations R. Also note object parms accessible equations, list parameters - may include parameters estimated. Also note must give names vectors, names must correspond names demes. use initial conditions time origin t0 chosen somewhat arbitrarily, occur root tree.","code":"library(phydynR)   library(rjson)   library(bbmle)   library(ggplot2) tree <- read.tree(system.file(\"extdata/sirModel0.nwk\", package = \"phydynR\")) epidata <- rjson::fromJSON(file=system.file(\"extdata/sirModel0.json\", package = \"phydynR\")) file.show( system.file(\"extdata/sirModel0.xml\", package = \"phydynR\")) parms_truth <- list( beta = 0.00020002,                       gamma = 1,                       S0 = 9999,                       t0 = 0 ) sampleTimes <- rep(12, 75) names(sampleTimes) <- tree$tip.label  bdt <- DatedTree( phylo = tree,                    sampleTimes = sampleTimes) bdt #>  #> Phylogenetic tree with 75 tips and 74 internal nodes. #>  #> Tip labels: #>   24, 7, 36, 75, 52, 38, ... #>  #> Rooted; includes branch lengths. births <- c( I = \"beta * S * I\" ) deaths <- c( I = \"gamma * I\" ) nonDemeDynamics <- c(S = \"-beta * S * I\") # initial number of I and S x0 <- c(I = 1, S = unname(parms_truth$S0))  # initial t0 (time of origin of the process) t0 <- bdt$maxSampleTime - max(bdt$heights) - 1"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/sir_model.html","id":"the-demographic-model","dir":"Articles","previous_headings":"Basic requirements","what":"The demographic model","title":"Estimating transmission rate using the SIR model","text":"setting components mathematical model, can build demographic process using function build.demographic.process phydynR package. dm output can used input coalescent models calculation likelihood. Now can calculate likelihood tree assess long takes: Note changing integrationMethod (choose “euler”), maxHeight (fit part tree) res (set smaller value) options can dramatically speed calculation cost accuracy.","code":"dm <- build.demographic.process(births = births,                                 nonDemeDynamics = nonDemeDynamics,                                 deaths = deaths,                                 parameterNames = names(parms_truth),                                 rcpp = TRUE,                                 sde = FALSE) #> [1] \"Fri Oct 11 14:19:23 2024 Compiling model...\" #> [1] \"Fri Oct 11 14:19:28 2024 Model complete\" print(system.time(print(phydynR::colik(tree = bdt,                                        theta = parms_truth,                                        demographic.process.model = dm,                                        x0 = x0,                                        t0 = t0,                                        res = 1000,                                        integrationMethod = \"rk4\")                         ))) #> [1] -378.142 #>    user  system elapsed  #>   0.340   0.009   0.358"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/articles/sir_model.html","id":"fitting-the-model","dir":"Articles","previous_headings":"","what":"Fitting the model","title":"Estimating transmission rate using the SIR model","text":"can fit model using maximum likelihood bbmle stats4 R packages. Note uses log-transformation variables must positive (like rates population sizes). can fit model running Note starting optimizer far true parameter values. fitting model real data, recommended try many different starting conditions large range values. optimizer take minutes run, instead load results: can compare fitted model true number infected time, shown Figure 1. Figure 1: actual (black) estimated (red) number infections time. blue line shows SIR model prediction true parameter values. can calculate confidence interval transmission rate using likelihood profiles: takes minutes, load results: can see confidence interval covers true value: , can visualize profile (Figure 2). Figure 2: Likelihood profile transmission rate \\(\\beta\\) confidence levels. true parameter value indicated vertical red line.","code":"obj_fun <- function(lnbeta, lnI0){      beta <- exp(lnbeta)   I0 <- exp(lnI0)   parms <- parms_truth   parms$beta <- beta   x0 <- c(I = unname(I0), S = unname(parms$S0) )      mll <- -phydynR::colik(tree = bdt,                          theta = parms_truth,                          demographic.process.model = dm,                          x0 = x0,                          t0 = t0,                          res = 1000,                          integrationMethod = \"rk4\")      print(paste(mll, beta, I0))   mll } fit <- mle2(obj_fun,             start = list(lnbeta = log(parms_truth$beta * 0.75), lnI0 = log(1)),             method = \"Nelder-Mead\",             optimizer = \"optim\",             control = list(trace=6, reltol=1e-8)) load( system.file(\"extdata/sirModel0-fit.RData\", package=\"phydynR\") )  AIC(fit) #> [1] -145.7974 logLik(fit) #> 'log Lik.' 74.89871 (df=2) coef(fit) #>     lnbeta       lnI0  #> -8.4748155  0.1351695 exp(coef(fit)) #>       lnbeta         lnI0  #> 0.0002086577 1.1447308446 exp(coef(fit)[\"lnbeta\"]) - parms_truth$beta #>       lnbeta  #> 8.637689e-06  # how biased is the estimate? exp(coef(fit)[\"lnbeta\"]) - parms_truth$beta #>       lnbeta  #> 8.637689e-06 beta <- exp(coef(fit)[\"lnbeta\"]) I0 <- exp(coef(fit)[\"lnI0\"]) parms <- parms_truth parms$beta <- beta x0 <- c(I = unname(I0), S = unname(parms$S0) )  o <- dm(parms,         x0,         t0,         t1 = bdt$maxSampleTime,         res = 1e3,          integrationMethod='rk4') o <- o[[5]]  otruth <- dm(parms_truth,              x0,              t0,               t1 = bdt$maxSampleTime,              res = 1e3,               integrationMethod='rk4') otruth <- otruth[[5]]  rdata <- data.frame(time = epidata$t, I = epidata$I)  ggplot(rdata, aes(x = time, y = I)) +   geom_point() +   geom_line(data = o, aes(x = time, y = I), col='blue') +   geom_line(data = otruth, aes(x = time, y = I), col='red') +   theme_bw() +   theme(element_text(size = 12)) +   xlab(\"Time\") +   ylab(\"Number of infected\") profbeta <- profile(fit,                      which = 1,                      alpha = 0.05,                     std.err = 1,                      trace = TRUE,                     tol.newmin = 1) load( system.file(\"extdata/sirModel0-profbeta.RData\", package = \"phydynR\")) c( exp( confint( profbeta ) ), TrueVal = parms_truth$beta ) #>        2.5 %       97.5 %      TrueVal  #> 0.0001901721 0.0002282366 0.0002000200 plot(profbeta) abline( v = log( parms_truth$beta) , col = \"red\")"},{"path":[]},{"path":"http://emvolz-phylodynamics.github.io/phydynR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Erik Volz. Author, maintainer. Fabricia F. Nascimento. Contributor.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Volz E (2024). phydynR: Model-based coalescent simulation likelihood phylodynamic inference. R package version 0.2.3, https://github.com/emvolz-phylodynamics/phydynR, http://emvolz-phylodynamics.github.io/phydynR/.","code":"@Manual{,   title = {phydynR: Model-based coalescent simulation and likelihood for phylodynamic inference},   author = {Erik Volz},   year = {2024},   note = {R package version 0.2.3, https://github.com/emvolz-phylodynamics/phydynR},   url = {http://emvolz-phylodynamics.github.io/phydynR/}, }"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/index.html","id":"phydynr-","dir":"","previous_headings":"","what":"Model-based coalescent simulation and likelihood for phylodynamic inference","title":"Model-based coalescent simulation and likelihood for phylodynamic inference","text":"phydynR R package based coalescent theory can define infectious disease models ecological process models terms ordinary differential equations (ODEs) stochastic differential equations (SDEs); simulate genealogies conditional process model; compute likelihoods phylogenetic trees also conditional process model.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Model-based coalescent simulation and likelihood for phylodynamic inference","text":"","code":"# You will need to install the R package devtools  # (https://github.com/r-lib/devtools)  install.packages(\"devtools\") devtools::install_github(\"emvolz-phylodynamics/phydynR\")"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"Model-based coalescent simulation and likelihood for phylodynamic inference","text":"recommend read Get started understand basic functions phydynR. can later explore tutorials: Estimating transmission rates using SIR model. Estimating transmission rates using slightly complex model HIV. Estimating genealogies epidemiological coalescent model. can try complex example estimating effective number infections basic reproduction number HIV Senegal.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/index.html","id":"author","dir":"","previous_headings":"","what":"Author","title":"Model-based coalescent simulation and likelihood for phylodynamic inference","text":"phydynR developed Erik Volz","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/index.html","id":"related-softwares","dir":"","previous_headings":"","what":"Related softwares","title":"Model-based coalescent simulation and likelihood for phylodynamic inference","text":"phydynR works fixed phylogenetic tree therefore program estimate tree . PhyDyn: like take consideration uncertainty tree estimates, check software PhyDyn implemented BEAST 2. details use start . PhyDyn substantially slow run. Coalescent.jl: implements similar specification demographic process substantially faster phydynR. Coalescent.jl based Julia programming language.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Model-based coalescent simulation and likelihood for phylodynamic inference","text":"like understand models implemented phydynR, check Volz, 2012","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":null,"dir":"Reference","previous_headings":"","what":"DatedTree function — DatedTree","title":"DatedTree function — DatedTree","text":"Create DatedTree class object; includes heights node   helper variables","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DatedTree function — DatedTree","text":"","code":"DatedTree(   phylo,   sampleTimes,   sampleStates = NULL,   sampleStatesAnnotations = NULL,   tol = 1e-06,   minEdgeLength = 0 )"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DatedTree function — DatedTree","text":"phylo phylogenetic tree class ape::phylo. Note tree timetree. sampleTimes numeric vector providing times samples. named, taxon labels based names corresponding sample times sampleStates models one deme, matrix must supplied describing probability sampling deme. row corresponds sample order sampleTimes. column corresponds probability sampling deme. Column names defined correspond deme names model. Rows sum one. sampleStatesAnnotations Vector possible discrete character states taxa. inferring taxon state label, provides possible matches taxon annotations. tol Numeric set amount error allowed edge length phylogenetic tree. minEdgeLength Numeric minimum length returned phylogenetic tree.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DatedTree function — DatedTree","text":"dated phylogenetic tree additional metadata use    phydynR functions.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DatedTree function — DatedTree","text":"tol minEdgeLength necessary adjust edge    length tree ensure greater 0 taking    consideration sample times.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DatedTree function — DatedTree","text":"Erik Volz","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/DatedTree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DatedTree function — DatedTree","text":"","code":"# read the tree #usually this is a tree that the branch lengths are in unit of calendar time tree <- read.tree(system.file('extdata/hivSimulation.nwk', package='phydynR'))  # the sample times are the same, because it is a homochronous sample at 50 years sampleTimes <- rep(50, length(tree$tip.label)) names(sampleTimes) <- tree$tip.label  # create a tree with dated tips and internal nodes, # will infer the sample states from tip labels bdt <- DatedTree(phylo = tree,                  sampleTimes = sampleTimes,                 minEdgeLength = 0.01) bdt #>  #> Phylogenetic tree with 318 tips and 317 internal nodes. #>  #> Tip labels: #>   89_I1, 349_I2, 339_I1, 64_I1, 203_I1, 30_I0, ... #>  #> Rooted; includes branch lengths. class(bdt) #> [1] \"DatedTree\" \"phylo\""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/build.demographic.process.html","id":null,"dir":"Reference","previous_headings":"","what":"Build a demographic process model (ODE or SDE) — build.demographic.process","title":"Build a demographic process model (ODE or SDE) — build.demographic.process","text":"model constructed supplying birth rates, migration rates, death rates. model can used simulate demographic histories input coalescent simulation likelihood calculation. demographic model can created using ordinary differential equations (ODEs) stochastic differential equations (SDEs)","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/build.demographic.process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build a demographic process model (ODE or SDE) — build.demographic.process","text":"","code":"build.demographic.process(   births,   nonDemeDynamics = NA,   migrations = NA,   deaths = NA,   parameterNames = c(),   rcpp = TRUE,   sde = FALSE )"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/build.demographic.process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build a demographic process model (ODE or SDE) — build.demographic.process","text":"births named character vector matrix mathematical expressions describe model birth rates. Names correspond deme. one deme, matrix must supplied describing birth rates pair demes. Either R C code can supplied (see rcpp option). nonDemeDynamics named character vector mathematical expressions describe rate change dynamic variables demes; example: equation number susceptible SIR model. migrations named character vector matrix mathematical expressions describe model migration rates. Names correspond deme. one deme, matrix must supplied describing migration rates pair demes. Either R C code can supplied (see rcpp option). deaths named character vector mathematical expressions describe death rates deme. parameterNames character vector providing names static parameters used model. rcpp TRUE, expressions interpreted C code using Rcpp package. sde TRUE, stochastic differential equation model constructed; FALSE, ordinary differential equation model constructed.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/build.demographic.process.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build a demographic process model (ODE or SDE) — build.demographic.process","text":"object class demographic.process, function   can used simulate model. model can also used   input tree simulation likelihood calculation.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/build.demographic.process.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Build a demographic process model (ODE or SDE) — build.demographic.process","text":"Erik Volz","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/build.demographic.process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Build a demographic process model (ODE or SDE) — build.demographic.process","text":"","code":"# A simple exponential growth model with birth rates beta, and death rates gamma: # I is the number of infected individuals. dm <- build.demographic.process(births=c(I = 'parms$beta * I'),                                 deaths = c(I = 'parms$gamma * I'),                                 parameterNames=c('beta', 'gamma'),                                 rcpp=FALSE,                                 sde = TRUE) # Do a simulation and plot the trajectory: show.demographic.process(dm,                          theta = list(beta = 1.5, gamma = 1),                          x0  = c(I = 1),                          t0 = 0,                          t1 = 10)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the coalescent log-likelihood. — colik","title":"Compute the coalescent log-likelihood. — colik","text":"Computes log-likelihood using coalescent (structured coalescent) genealogical model based user-supplied demographic process.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the coalescent log-likelihood. — colik","text":"","code":"colik(   tree,   theta,   demographic.process.model,   x0,   t0,   res = 1000,   integrationMethod = \"lsoda\",   timeOfOriginBoundaryCondition = TRUE,   maxHeight = Inf,   forgiveAgtY = 1,   AgtY_penalty = 1,   returnTree = FALSE,   step_size_res = 10,   likelihood = \"PL2\" )"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the coalescent log-likelihood. — colik","text":"tree DatedTree object theta named numeric vector named list parameter values used demographic model demographic.process.model See build.demographic.process x0 named vector initial conditions required model. includes demes dynamic variables. t0 time origin process. predate root tree. res Integer number time steps use simulating model. integrationMethod simulating ODE (ordinary differential equation) model, provides integration routine corresponding options deSolve. timeOfOriginBoundaryCondition TRUE, return -Inf root tree precedes time origin. maxHeight count internode intervals likelihood occur maxHeight years present. Useful large trees want model entire demographic history. forgiveAgtY number extant lineages exceeds simulated population size, return -Inf value zero, forgive discrepancy zero. zero one, forgive discrepancy proportion lineages less given value. AgtY_penalty number extant lineages exceeds simulated population size, penalize likelihood value L*AgtY_penalty L cumulative coalescent rate within given internode interval. 0<= AgtY_penalty <= Inf. returnTree TRUE, copy tree also returned, includes inferred states lineages likelihood terms internal node. step_size_res Parameter ODE solver; default number timesteps use solving coalescent equations internode interval likelihood Toggle likelihood approximation used (QL fast/approximate, PL1 faster better approximation, PL2 slow/good approximation. See Volz & Siveroni 2018 details. Default set PL2.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the coalescent log-likelihood. — colik","text":"coalescent (structured coalescent) log likelihood (numeric).","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute the coalescent log-likelihood. — colik","text":"Erik Volz","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the coalescent log-likelihood. — colik","text":"","code":"# A simple exponential growth model with birth rates beta and death rates gamma: dm <- build.demographic.process(births = c(I = 'parms$beta * I'),                                 deaths = c(I = 'parms$gamma * I'),                                 parameterNames = c('beta', 'gamma'),                                 rcpp = FALSE,                                 sde = FALSE)  # simulate a tree based on the model: tre <- sim.co.tree(list(beta = 1.5, gamma = 1),                         dm,                         x0  = c(I = 1),                         t0 = 0,                         sampleTimes = seq(10, 15, length.out=50),                         res = 1000)  # Compute a likelihood colik(tre,       list(beta = 1.5, gamma = 1),       dm,       x0 = c(I = 1),       t0 = -1,       res = 1e3) #> [1] -216.1359"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.pik.fgy.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","title":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","text":"Compute structured coalescent likelihood given dated genealogy demographic history FGY format","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.pik.fgy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","text":"","code":"colik.pik.fgy(   tree,   tfgy,   timeOfOriginBoundaryCondition = TRUE,   maxHeight = Inf,   forgiveAgtY = 1,   AgtY_penalty = 1,   returnTree = FALSE,   step_size_res = 10,   PL2 = FALSE )"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.pik.fgy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","text":"tree DatedTree object tfgy class tfgy corresponds time, births, migrations number infections. See examples construct one. timeOfOriginBoundaryCondition TRUE, return -Inf root tree precedes time origin. maxHeight count internode intervals likelihood occur maxHeight years present. Useful large trees want model entire demographic history. forgiveAgtY number extant lineages exceeds simulated population size, return -Inf value zero, forgive discrepancy zero. zero one, forgive discrepancy proportion lineages less given value. AgtY_penalty number extant lineages exceeds simulated population size, penalize likelihood value L*AgtY_penalty L cumulative coalescent rate within given internode interval. 0<= AgtY_penalty <= Inf. returnTree TRUE, copy tree also returned, includes inferred states lineages likelihood terms internal node. step_size_res Parameter ODE solver; default number timesteps use solving coalescent equations internode interval PL2 Toggle likelihood approximation used. TRUE, likelihood    PL2 used. PL2 = FALSE, likelihood PL1 used.   (PL1 faster better approximation, PL2 slow/good   approximation). See Volz & Siveroni 2018 details.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.pik.fgy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","text":"coalescent (structured coalescent) log likelihood (numeric).","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.pik.fgy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","text":"Erik Volz","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/colik.pik.fgy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a structured coalescent likelihood given a dated genealogy and a demographic history in FGY format — colik.pik.fgy","text":"","code":"# A simple exponential growth model with birth rates beta and death rates gamma: dm <- build.demographic.process(births = c(I = 'parms$beta * I'),                                 deaths = c(I = 'parms$gamma * I'),                                 parameterNames = c('beta', 'gamma'),                                 rcpp = FALSE,                                 sde = FALSE)  # simulate a tree based on the model: tre <- sim.co.tree(list(beta = 1.5, gamma = 1),                         dm,                         x0  = c(I = 1),                         t0 = 0,                         sampleTimes = seq(10, 15, length.out=50),                         res = 1000)                           #Create the tfgy using the dm function above  tfgy <- dm(theta = list(beta = 1.5, gamma = 1),             x0 = c(I = 1),             t0 = 0,             t1 = 15)    # Compute a likelihood  colik.pik.fgy(tre, tfgy) #> [1] -207.836"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/dot-phylostructure2newick.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a newick string for an ape::phylo structure regardless of internal node order — .phylostructure2newick","title":"Write a newick string for an ape::phylo structure regardless of internal node order — .phylostructure2newick","text":"Ideally behavior ape::write.tree, however function fails internal node orderings follow undocumented standard.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/dot-phylostructure2newick.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a newick string for an ape::phylo structure regardless of internal node order — .phylostructure2newick","text":"","code":".phylostructure2newick(o)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/dot-phylostructure2newick.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a newick string for an ape::phylo structure regardless of internal node order — .phylostructure2newick","text":"","code":"print( system.time( ( tr0 <- rcoal( 10000 ) ))) #>    user  system elapsed  #>   0.566   0.095   0.661  st0 <- Sys.time()  tr <- .phylostructure2newick ( tr0 ) #> Error in .phylostructure2newick(tr0): could not find function \".phylostructure2newick\" st1 <- Sys.time()  tr1 <- read.tree(text = tr ) #> Error in eval(expr, envir, enclos): object 'tr' not found print( st1 - st0 ) #> Time difference of 0.0006210804 secs ape::ltt.plot( tr0 )  ape::ltt.lines( tr1, col = 'red', lty = 2 ) #> Error in eval(expr, envir, enclos): object 'tr1' not found"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/phydynR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"phydynR: Model-based coalescent simulation and likelihood for phylodynamic inference — phydynR-package","title":"phydynR: Model-based coalescent simulation and likelihood for phylodynamic inference — phydynR-package","text":"package provides functions defining infectious disease models ecological process models terms ODEs (ordinary differential equations) SDEs (stochastic differential equations); functions simulating trees conditional process models; functions computing likelihoods trees conditional process model.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/phydynR-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phydynR: Model-based coalescent simulation and likelihood for phylodynamic inference — phydynR-package","text":"1. Volz, Erik M. Complex population dynamics coalescent   neutrality. Genetics 190.1 (2012): 187-201. 2. Volz, Erik M., Katia Koelle, Trevor Bedford. Viral phylodynamics.   PLoS Comput Biol 9.3 (2013): e1002947.","code":""},{"path":[]},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/phydynR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"phydynR: Model-based coalescent simulation and likelihood for phylodynamic inference — phydynR-package","text":"Maintainer: Erik Volz erik@erikvolz.info (ORCID) contributors: Fabricia F. Nascimento thednainus@yahoo.com (ORCID) [contributor]","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/show.demographic.process.html","id":null,"dir":"Reference","previous_headings":"","what":"Show demographic process — show.demographic.process","title":"Show demographic process — show.demographic.process","text":"Shows graphical representation demographic process given values parameter interest, initial population sizes. user also provide initial size population interest model.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/show.demographic.process.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show demographic process — show.demographic.process","text":"","code":"show.demographic.process(   demo.model,   theta,   x0,   t0,   t1,   res = 1000,   integrationMethod = \"lsoda\",   legend_position = \"bottomright\",   ... )"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/show.demographic.process.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show demographic process — show.demographic.process","text":"demo.model object class demographic.process, function can used simulate model. theta named numeric vector named list parameter values used demographic model x0 named vector initial conditions required model. includes demes dynamic variables. t0 Initial time simulation (show demographic process) t1 Final time tge simulation (show demographic process) res Integer number time steps use simulating model. integrationMethod simulating ODE (ordinary differential equation) model, provides integration routine corresponding options deSolve. legend_position String position legend final plot. Default set \"bottomright\" ... Additional arguments can passed function, graphical parameters.","code":""},{"path":[]},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/show.demographic.process.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show demographic process — show.demographic.process","text":"","code":"# A simple exponential growth model with birth rates beta and death rates gamma: # I is the number of infected individuals. dm <- build.demographic.process(births=c(I = 'parms$beta * I'),                                 deaths = c(I = 'parms$gamma * I'),                                 parameterNames=c('beta', 'gamma'),                                 rcpp=FALSE,                                 sde = TRUE) # Do a simulation and plot the trajectory: show.demographic.process(dm,                          theta = list(beta = 1.5, gamma = 1),                          x0  = c(I = 1),                          t0 = 0,                          t1 = 10)"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/sim.co.tree.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","title":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","text":"tree simulated based demographic process user-supplied parameters   initial conditions. times types samples must also supplied.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/sim.co.tree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","text":"","code":"sim.co.tree(   theta,   demographic.process.model,   x0,   t0,   sampleTimes,   sampleStates = NULL,   res = 1000,   integrationMethod = \"lsoda\",   finiteSizeCorrections = TRUE,   substitutionRates = NULL,   sequenceLength = 0 )"},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/sim.co.tree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","text":"theta named vector parameter values required model demographic.process.model object class demographic.process. See build.demographic.process x0 named vector initial conditions required model. includes demes dynamic variables. t0 time origin process sampleTimes numeric vector providing times samples. named, taxon labels based names corresponding sample times sampleStates models one deme, matrix must supplied describing probability sampling deme. row corresponds sample order sampleTimes. column corresponds probability sampling deme. Column names defined correspond deme names model. Rows sum one. res Integer number time steps use simulating model. integrationMethod simulating ODE (ordinary differential equation) model, provides integration routine corresponding options deSolve. finiteSizeCorrections substitutionRates sequenceLength ","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/sim.co.tree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","text":"object class DatedTree, subclasses ape::phylo.  $heights attribute provides time node tree.  $maxHeight attribute provides time root.","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/sim.co.tree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","text":"Erik Volz","code":""},{"path":"http://emvolz-phylodynamics.github.io/phydynR/reference/sim.co.tree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a coalescent genealogy based on a demographic process. — sim.co.tree","text":"","code":"# A simple exponential growth model with birth rates beta, and death rates gamma:  # I is the number of infected individuals dm <- build.demographic.process(births = c(I = 'parms$beta * I'),                                deaths = c(I = 'parms$gamma * I'),                                parameterNames = c('beta', 'gamma'),                                rcpp = FALSE,                                sde = FALSE) # simulate a tree based on the model:  tre <- sim.co.tree(list(beta = 1.5, gamma = 1),                        dm,                        x0  = c(I = 1),                        t0 = 0,                        sampleTimes = seq(10, 15, length.out = 50),                        res = 1000) # plot the tree  plot(tre)"}]
