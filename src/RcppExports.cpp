// This file was generated by Rcpp::compileAttributes

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma; 

// simulateTreeCpp2
List simulateTreeCpp2(const NumericVector times, const List Fs, const List Gs, const List Ys, const List As, NumericVector sortedCoHeights, const NumericVector sortedSampleHeights, const NumericMatrix sortedSampleStates, double maxSampleTime, const int m, bool finiteSizeCorrection,  std::vector< std::string > DEMES);
RcppExport SEXP sourceCpp_2_simulateTreeCpp2(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP AsSEXP, SEXP sortedCoHeightsSEXP, SEXP sortedSampleHeightsSEXP, SEXP sortedSampleStatesSEXP, SEXP maxSampleTimeSEXP, SEXP mSEXP, SEXP finiteSizeCorrectionSEXP, SEXP DEMESSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const List >::type As(AsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sortedCoHeights(sortedCoHeightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type sortedSampleHeights(sortedSampleHeightsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type sortedSampleStates(sortedSampleStatesSEXP);
    Rcpp::traits::input_parameter< double >::type maxSampleTime(maxSampleTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type finiteSizeCorrection(finiteSizeCorrectionSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type DEMES(DEMESSEXP);
    __result = Rcpp::wrap(simulateTreeCpp2(times, Fs, Gs, Ys, As, sortedCoHeights, sortedSampleHeights, sortedSampleStates, maxSampleTime, m, finiteSizeCorrection, DEMES));
    return __result;
END_RCPP
}


// simulateTreeCpp3
List simulateTreeCpp3x0(const vec times
	  , const List Fs, const List Gs, const List Ys
	  , const vec sortedSampleHeights
	  , const mat sortedSampleStates // m X n 
	  , double maxSampleTime 
	  , const int m
	  , bool finiteSizeCorrection
	  , vec substitutionRates
	  , int sequenceLength);
RcppExport SEXP sourceCpp_simulateTreeCpp3x0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP sortedSampleHeightsSEXP, SEXP sortedSampleStatesSEXP, SEXP maxSampleTimeSEXP, SEXP mSEXP, SEXP finiteSizeCorrectionSEXP
, SEXP substitutionRatesSEXP, SEXP sequenceLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const vec >::type sortedSampleHeights(sortedSampleHeightsSEXP);
    Rcpp::traits::input_parameter< const mat >::type sortedSampleStates(sortedSampleStatesSEXP);
    Rcpp::traits::input_parameter< double >::type maxSampleTime(maxSampleTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type finiteSizeCorrection(finiteSizeCorrectionSEXP);
    Rcpp::traits::input_parameter< const vec >::type substitutionRates(substitutionRatesSEXP);
    Rcpp::traits::input_parameter< const int >::type sequenceLength(sequenceLengthSEXP);
    __result = Rcpp::wrap(simulateTreeCpp3x0( times
	  ,  Fs,  Gs,  Ys
	  ,  sortedSampleHeights
	  ,  sortedSampleStates // m X n 
	  , maxSampleTime 
	  ,  m
	  , finiteSizeCorrection
	  , substitutionRates
	  , sequenceLength));
    return __result;
END_RCPP
}





// dAL
List dAL(double t, NumericVector y, List parms);
RcppExport SEXP sourceCpp_0_dAL(SEXP tSEXP, SEXP ySEXP, SEXP parmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type parms(parmsSEXP);
    __result = Rcpp::wrap(dAL(t, y, parms));
    return __result;
END_RCPP
}

// updateWCpp
NumericMatrix updateWCpp(NumericMatrix W, NumericVector psi_a, IntegerVector utips, IntegerVector vtips, IntegerVector utips_Wcoords, IntegerVector vtips_Wcoords);
RcppExport SEXP sourceCpp_0_updateWCpp(SEXP WSEXP, SEXP psi_aSEXP, SEXP utipsSEXP, SEXP vtipsSEXP, SEXP utips_WcoordsSEXP, SEXP vtips_WcoordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_a(psi_aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type utips(utipsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vtips(vtipsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type utips_Wcoords(utips_WcoordsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vtips_Wcoords(vtips_WcoordsSEXP);
    __result = Rcpp::wrap(updateWCpp(W, psi_a, utips, vtips, utips_Wcoords, vtips_Wcoords));
    return __result;
END_RCPP
}

// sourceAttribMultiDemeCpp
List sourceAttribMultiDemeCpp(const NumericVector heights, const List Fs, const List Gs, const List Ys
  , const IntegerVector eventIndicator // sample or co
  , const IntegerVector eventIndicatorNode // node involved at each event
  , const NumericVector eventHeights
  , const mat sortedSampleStates
  , const IntegerMatrix daughters // daughters of each node
  , const int n
  , const int Nnode
  , const int m
  , double AgtYboundaryCondition
  , const double maxHeight // terminate computation at this height
);
RcppExport SEXP sourceCpp_0_sourceAttribMultiDemeCpp( SEXP heightsSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP eventIndicatorSEXP, SEXP eventIndicatorNodeSEXP, SEXP eventHeightsSEXP, SEXP sortedSampleStatesSEXP, SEXP daughtersSEXP, SEXP nSEXP, SEXP NnodeSEXP, SEXP mSEXP, SEXP AgtYboundaryConditionSEXP, SEXP maxHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicator(eventIndicatorSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicatorNode(eventIndicatorNodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type eventHeights(eventHeightsSEXP);
    Rcpp::traits::input_parameter< const mat >::type sortedSampleStates(sortedSampleStatesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type daughters(daughtersSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type AgtYboundaryCondition(AgtYboundaryConditionSEXP);
    Rcpp::traits::input_parameter< const double >::type maxHeight(maxHeightSEXP);
    
    __result = Rcpp::wrap(sourceAttribMultiDemeCpp( heights, Fs,  Gs,  Ys
	  ,  eventIndicator // sample or co
	  ,  eventIndicatorNode // node involved at each event
	  ,  eventHeights
	  ,  sortedSampleStates
	  ,  daughters // daughters of each node
	  , n
	  ,  Nnode
	  ,  m
	  ,  AgtYboundaryCondition
	  ,  maxHeight // terminate computation at this height
	));
    return __result;
END_RCPP
}

// sourceAttribMultiDemeCpp2
List sourceAttribMultiDemeCpp2(const NumericVector heights, const List Fs, const List Gs, const List Ys, const IntegerVector eventIndicator, const IntegerVector eventIndicatorNode, const NumericVector eventHeights, const mat sampleStates, const IntegerMatrix daughters, const int n, const int Nnode, const int m, double AgtYboundaryCondition, const double maxHeight, const int step_size_res);

RcppExport SEXP sourceCpp_1_sourceAttribMultiDemeCpp2(SEXP heightsSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP eventIndicatorSEXP, SEXP eventIndicatorNodeSEXP, SEXP eventHeightsSEXP, SEXP sampleStatesSEXP, SEXP daughtersSEXP, SEXP nSEXP, SEXP NnodeSEXP, SEXP mSEXP, SEXP AgtYboundaryConditionSEXP, SEXP maxHeightSEXP, SEXP step_size_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicator(eventIndicatorSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicatorNode(eventIndicatorNodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type eventHeights(eventHeightsSEXP);
    Rcpp::traits::input_parameter< const mat >::type sampleStates(sampleStatesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type daughters(daughtersSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type AgtYboundaryCondition(AgtYboundaryConditionSEXP);
    Rcpp::traits::input_parameter< const double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< const int >::type step_size_res(step_size_resSEXP);
    rcpp_result_gen = Rcpp::wrap(sourceAttribMultiDemeCpp2(heights, Fs, Gs, Ys, eventIndicator, eventIndicatorNode, eventHeights, sampleStates, daughters, n, Nnode, m, AgtYboundaryCondition, maxHeight, step_size_res));
    return rcpp_result_gen;
END_RCPP
}



////// colik modular stuff
// rco_finite_size_correction2
void rco_finite_size_correction2(const int a, const vec& p_a, const vec& A, const uvec& extantLines, mat& mstates);
RcppExport SEXP sourceCpp_0_rco_finite_size_correction2(SEXP aSEXP, SEXP p_aSEXP, SEXP ASEXP, SEXP extantLinesSEXP, SEXP mstatesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type a(aSEXP);
    Rcpp::traits::input_parameter< const vec& >::type p_a(p_aSEXP);
    Rcpp::traits::input_parameter< const vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const uvec& >::type extantLines(extantLinesSEXP);
    Rcpp::traits::input_parameter< mat& >::type mstates(mstatesSEXP);
    rco_finite_size_correction2(a, p_a, A, extantLines, mstates);
    return R_NilValue;
END_RCPP
}
// eventTimes2extant
List eventTimes2extant(vec eventTimes, vec nodeheights, vec parentheights);
RcppExport SEXP sourceCpp_0_eventTimes2extant(SEXP eventTimesSEXP, SEXP nodeheightsSEXP, SEXP parentheightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type eventTimes(eventTimesSEXP);
    Rcpp::traits::input_parameter< vec >::type nodeheights(nodeheightsSEXP);
    Rcpp::traits::input_parameter< vec >::type parentheights(parentheightsSEXP);
    __result = Rcpp::wrap(eventTimes2extant(eventTimes, nodeheights, parentheights));
    return __result;
END_RCPP
}
// update_alpha0
List update_alpha0(vec pu, vec pv, mat F, vec Y, vec A);
RcppExport SEXP sourceCpp_0_update_alpha0(SEXP puSEXP, SEXP pvSEXP, SEXP FSEXP, SEXP YSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type pu(puSEXP);
    Rcpp::traits::input_parameter< vec >::type pv(pvSEXP);
    Rcpp::traits::input_parameter< mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< vec >::type A(ASEXP);
    __result = Rcpp::wrap(update_alpha0(pu, pv, F, Y, A));
    return __result;
END_RCPP
}
// update_states0
void update_states0(mat& mstates, mat Q);
RcppExport SEXP sourceCpp_0_update_states0(SEXP mstatesSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< mat& >::type mstates(mstatesSEXP);
    Rcpp::traits::input_parameter< mat >::type Q(QSEXP);
    update_states0(mstates, Q);
    return R_NilValue;
END_RCPP
}
mat update_states1(mat& mstates, mat Q, vec el);
RcppExport SEXP sourceCpp_0_update_states1(SEXP mstatesSEXP, SEXP QSEXP, SEXP elSEXP) {
BEGIN_RCPP
	Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< mat& >::type mstates(mstatesSEXP);
    Rcpp::traits::input_parameter< mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< vec >::type el(elSEXP);
    __result = update_states1(mstates, Q, el);
    return __result; 
END_RCPP
}

// solveQALboost0
List solveQALboost0(vec times, List Fs, List Gs, List Ys, double h0, double h1, double L0, vec A0);
RcppExport SEXP sourceCpp_2_solveQALboost0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP L0SEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< vec >::type A0(A0SEXP);
    __result = Rcpp::wrap(solveQALboost0(times, Fs, Gs, Ys, h0, h1, L0, A0));
    return __result;
END_RCPP
}

//dQL
vec dQL( vec x , mat F , mat G, vec Y, vec A0);
RcppExport SEXP scpp_dQL( SEXP xSP , SEXP FSP, SEXP GSP, SEXP YSP, SEXP A0SP){
BEGIN_RCPP
	Rcpp::RObject __result; 
	Rcpp::RNGScope __rngScope;
	
	Rcpp::traits::input_parameter<vec>::type x(xSP);
	Rcpp::traits::input_parameter<vec>::type Y(YSP);
	Rcpp::traits::input_parameter<vec>::type A0(A0SP);
	Rcpp::traits::input_parameter<mat>::type F(FSP);
	Rcpp::traits::input_parameter<mat>::type G(GSP);
	
	__result = Rcpp::wrap(dQL( x, F, G, Y, A0 ));
	return __result;
END_RCPP
}


// likelihood that solves for state for each line
List solvePikL0(vec times, List Fs, List Gs, List Ys, double h0, double h1, mat pik0, double step_size_res);
RcppExport SEXP sourceCpp_1_solvePikL0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP pik0SEXP, SEXP step_size_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< mat >::type pik0(pik0SEXP);
    Rcpp::traits::input_parameter< double >::type step_size_res(step_size_resSEXP);
    __result = Rcpp::wrap(solvePikL0(times, Fs, Gs, Ys, h0, h1, pik0, step_size_res));
    return __result;
END_RCPP
}


// solveQfwd0
mat solveQfwd0(vec times, List Fs, List Gs, List Ys, List deaths, int m, double h1, double h0);
RcppExport SEXP sourceCpp_1_solveQfwd0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP deathsSEXP, SEXP mSEXP, SEXP h1SEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< List >::type deaths(deathsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(solveQfwd0(times, Fs, Gs, Ys, deaths, m, h1, h0));
    return rcpp_result_gen;
END_RCPP
}
