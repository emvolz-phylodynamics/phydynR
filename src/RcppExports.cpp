// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rco_finite_size_correction2
void rco_finite_size_correction2(const int a, const arma::vec& p_a, const arma::vec& A, const arma::uvec& extantLines, arma::mat& mstates);
RcppExport SEXP _phydynR_rco_finite_size_correction2(SEXP aSEXP, SEXP p_aSEXP, SEXP ASEXP, SEXP extantLinesSEXP, SEXP mstatesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_a(p_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type extantLines(extantLinesSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mstates(mstatesSEXP);
    rco_finite_size_correction2(a, p_a, A, extantLines, mstates);
    return R_NilValue;
END_RCPP
}
// eventTimes2extant
List eventTimes2extant(arma::vec eventTimes, arma::vec nodeheights, arma::vec parentheights);
RcppExport SEXP _phydynR_eventTimes2extant(SEXP eventTimesSEXP, SEXP nodeheightsSEXP, SEXP parentheightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type eventTimes(eventTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nodeheights(nodeheightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parentheights(parentheightsSEXP);
    rcpp_result_gen = Rcpp::wrap(eventTimes2extant(eventTimes, nodeheights, parentheights));
    return rcpp_result_gen;
END_RCPP
}
// update_alpha0
List update_alpha0(arma::vec pu, arma::vec pv, arma::mat F, arma::vec Y, arma::vec A);
RcppExport SEXP _phydynR_update_alpha0(SEXP puSEXP, SEXP pvSEXP, SEXP FSEXP, SEXP YSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type pu(puSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type pv(pvSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(update_alpha0(pu, pv, F, Y, A));
    return rcpp_result_gen;
END_RCPP
}
// update_states0
void update_states0(arma::mat& mstates, arma::mat Q);
RcppExport SEXP _phydynR_update_states0(SEXP mstatesSEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mstates(mstatesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    update_states0(mstates, Q);
    return R_NilValue;
END_RCPP
}
// update_states1
arma::mat update_states1(arma::mat& mstates, arma::mat Q, arma::vec extantLines);
RcppExport SEXP _phydynR_update_states1(SEXP mstatesSEXP, SEXP QSEXP, SEXP extantLinesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mstates(mstatesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type extantLines(extantLinesSEXP);
    rcpp_result_gen = Rcpp::wrap(update_states1(mstates, Q, extantLines));
    return rcpp_result_gen;
END_RCPP
}
// dAL
List dAL(double t, NumericVector y, List parms);
RcppExport SEXP _phydynR_dAL(SEXP tSEXP, SEXP ySEXP, SEXP parmsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< List >::type parms(parmsSEXP);
    rcpp_result_gen = Rcpp::wrap(dAL(t, y, parms));
    return rcpp_result_gen;
END_RCPP
}
// solvePikL0
List solvePikL0(arma::vec times, List Fs, List Gs, List Ys, double h0, double h1, arma::mat pik0, double step_size_res);
RcppExport SEXP _phydynR_solvePikL0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP pik0SEXP, SEXP step_size_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pik0(pik0SEXP);
    Rcpp::traits::input_parameter< double >::type step_size_res(step_size_resSEXP);
    rcpp_result_gen = Rcpp::wrap(solvePikL0(times, Fs, Gs, Ys, h0, h1, pik0, step_size_res));
    return rcpp_result_gen;
END_RCPP
}
// solvePikL1
List solvePikL1(arma::vec times, List Fs, List Gs, List Ys, double h0, double h1, arma::mat pik0, double step_size_res);
RcppExport SEXP _phydynR_solvePikL1(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP pik0SEXP, SEXP step_size_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type pik0(pik0SEXP);
    Rcpp::traits::input_parameter< double >::type step_size_res(step_size_resSEXP);
    rcpp_result_gen = Rcpp::wrap(solvePikL1(times, Fs, Gs, Ys, h0, h1, pik0, step_size_res));
    return rcpp_result_gen;
END_RCPP
}
// dQL
arma::vec dQL(arma::vec x, arma::mat F, arma::mat G, arma::vec Y, arma::vec A0);
RcppExport SEXP _phydynR_dQL(SEXP xSEXP, SEXP FSEXP, SEXP GSEXP, SEXP YSEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type F(FSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A0(A0SEXP);
    rcpp_result_gen = Rcpp::wrap(dQL(x, F, G, Y, A0));
    return rcpp_result_gen;
END_RCPP
}
// solveQfwd0
arma::mat solveQfwd0(arma::vec times, List Fs, List Gs, List Ys, List deaths, int m, double h1, double h0);
RcppExport SEXP _phydynR_solveQfwd0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP deathsSEXP, SEXP mSEXP, SEXP h1SEXP, SEXP h0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< List >::type deaths(deathsSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    rcpp_result_gen = Rcpp::wrap(solveQfwd0(times, Fs, Gs, Ys, deaths, m, h1, h0));
    return rcpp_result_gen;
END_RCPP
}
// updateWCpp
NumericMatrix updateWCpp(NumericMatrix W, NumericVector psi_a, IntegerVector utips, IntegerVector vtips, IntegerVector utips_Wcoords, IntegerVector vtips_Wcoords);
RcppExport SEXP _phydynR_updateWCpp(SEXP WSEXP, SEXP psi_aSEXP, SEXP utipsSEXP, SEXP vtipsSEXP, SEXP utips_WcoordsSEXP, SEXP vtips_WcoordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type W(WSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type psi_a(psi_aSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type utips(utipsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vtips(vtipsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type utips_Wcoords(utips_WcoordsSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type vtips_Wcoords(vtips_WcoordsSEXP);
    rcpp_result_gen = Rcpp::wrap(updateWCpp(W, psi_a, utips, vtips, utips_Wcoords, vtips_Wcoords));
    return rcpp_result_gen;
END_RCPP
}
// sourceAttribMultiDemeCpp2
List sourceAttribMultiDemeCpp2(const NumericVector heights, const List Fs, const List Gs, const List Ys, const IntegerVector eventIndicator, const IntegerVector eventIndicatorNode, const NumericVector eventHeights, const arma::mat sampleStates, const IntegerMatrix daughters, const int n, const int Nnode, const int m, double AgtYboundaryCondition, const double maxHeight, const int step_size_res);
RcppExport SEXP _phydynR_sourceAttribMultiDemeCpp2(SEXP heightsSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP eventIndicatorSEXP, SEXP eventIndicatorNodeSEXP, SEXP eventHeightsSEXP, SEXP sampleStatesSEXP, SEXP daughtersSEXP, SEXP nSEXP, SEXP NnodeSEXP, SEXP mSEXP, SEXP AgtYboundaryConditionSEXP, SEXP maxHeightSEXP, SEXP step_size_resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicator(eventIndicatorSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicatorNode(eventIndicatorNodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type eventHeights(eventHeightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sampleStates(sampleStatesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type daughters(daughtersSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type AgtYboundaryCondition(AgtYboundaryConditionSEXP);
    Rcpp::traits::input_parameter< const double >::type maxHeight(maxHeightSEXP);
    Rcpp::traits::input_parameter< const int >::type step_size_res(step_size_resSEXP);
    rcpp_result_gen = Rcpp::wrap(sourceAttribMultiDemeCpp2(heights, Fs, Gs, Ys, eventIndicator, eventIndicatorNode, eventHeights, sampleStates, daughters, n, Nnode, m, AgtYboundaryCondition, maxHeight, step_size_res));
    return rcpp_result_gen;
END_RCPP
}
// sourceAttribMultiDemeCpp
List sourceAttribMultiDemeCpp(const NumericVector heights, const List Fs, const List Gs, const List Ys, const IntegerVector eventIndicator, const IntegerVector eventIndicatorNode, const NumericVector eventHeights, const arma::mat sampleStates, const IntegerMatrix daughters, const int n, const int Nnode, const int m, double AgtYboundaryCondition, const double maxHeight);
RcppExport SEXP _phydynR_sourceAttribMultiDemeCpp(SEXP heightsSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP eventIndicatorSEXP, SEXP eventIndicatorNodeSEXP, SEXP eventHeightsSEXP, SEXP sampleStatesSEXP, SEXP daughtersSEXP, SEXP nSEXP, SEXP NnodeSEXP, SEXP mSEXP, SEXP AgtYboundaryConditionSEXP, SEXP maxHeightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type heights(heightsSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicator(eventIndicatorSEXP);
    Rcpp::traits::input_parameter< const IntegerVector >::type eventIndicatorNode(eventIndicatorNodeSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type eventHeights(eventHeightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sampleStates(sampleStatesSEXP);
    Rcpp::traits::input_parameter< const IntegerMatrix >::type daughters(daughtersSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type Nnode(NnodeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type AgtYboundaryCondition(AgtYboundaryConditionSEXP);
    Rcpp::traits::input_parameter< const double >::type maxHeight(maxHeightSEXP);
    rcpp_result_gen = Rcpp::wrap(sourceAttribMultiDemeCpp(heights, Fs, Gs, Ys, eventIndicator, eventIndicatorNode, eventHeights, sampleStates, daughters, n, Nnode, m, AgtYboundaryCondition, maxHeight));
    return rcpp_result_gen;
END_RCPP
}
// solveQALboost0
List solveQALboost0(arma::vec times, List Fs, List Gs, List Ys, double h0, double h1, double L0, arma::vec A0);
RcppExport SEXP _phydynR_solveQALboost0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP L0SEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A0(A0SEXP);
    rcpp_result_gen = Rcpp::wrap(solveQALboost0(times, Fs, Gs, Ys, h0, h1, L0, A0));
    return rcpp_result_gen;
END_RCPP
}
// solveQALboost1
List solveQALboost1(arma::vec times, List Fs, List Gs, List Ys, double h0, double h1, double L0, arma::vec A0);
RcppExport SEXP _phydynR_solveQALboost1(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP h0SEXP, SEXP h1SEXP, SEXP L0SEXP, SEXP A0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< double >::type h0(h0SEXP);
    Rcpp::traits::input_parameter< double >::type h1(h1SEXP);
    Rcpp::traits::input_parameter< double >::type L0(L0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type A0(A0SEXP);
    rcpp_result_gen = Rcpp::wrap(solveQALboost1(times, Fs, Gs, Ys, h0, h1, L0, A0));
    return rcpp_result_gen;
END_RCPP
}
// simulateTreeCpp2
List simulateTreeCpp2(const NumericVector times, const List Fs, const List Gs, const List Ys, const List As, NumericVector sortedCoHeights, const NumericVector sortedSampleHeights, const NumericMatrix sortedSampleStates, double maxSampleTime, const int m, bool finiteSizeCorrection, std::vector< std::string > DEMES);
RcppExport SEXP _phydynR_simulateTreeCpp2(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP AsSEXP, SEXP sortedCoHeightsSEXP, SEXP sortedSampleHeightsSEXP, SEXP sortedSampleStatesSEXP, SEXP maxSampleTimeSEXP, SEXP mSEXP, SEXP finiteSizeCorrectionSEXP, SEXP DEMESSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const List >::type As(AsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type sortedCoHeights(sortedCoHeightsSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type sortedSampleHeights(sortedSampleHeightsSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix >::type sortedSampleStates(sortedSampleStatesSEXP);
    Rcpp::traits::input_parameter< double >::type maxSampleTime(maxSampleTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type finiteSizeCorrection(finiteSizeCorrectionSEXP);
    Rcpp::traits::input_parameter< std::vector< std::string > >::type DEMES(DEMESSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateTreeCpp2(times, Fs, Gs, Ys, As, sortedCoHeights, sortedSampleHeights, sortedSampleStates, maxSampleTime, m, finiteSizeCorrection, DEMES));
    return rcpp_result_gen;
END_RCPP
}
// simulateTreeCpp3x0
List simulateTreeCpp3x0(const arma::vec times, const List Fs, const List Gs, const List Ys, const arma::vec sortedSampleHeights, const arma::mat sortedSampleStates, double maxSampleTime, const int m, bool finiteSizeCorrection, arma::vec substitutionRates, int sequenceLength);
RcppExport SEXP _phydynR_simulateTreeCpp3x0(SEXP timesSEXP, SEXP FsSEXP, SEXP GsSEXP, SEXP YsSEXP, SEXP sortedSampleHeightsSEXP, SEXP sortedSampleStatesSEXP, SEXP maxSampleTimeSEXP, SEXP mSEXP, SEXP finiteSizeCorrectionSEXP, SEXP substitutionRatesSEXP, SEXP sequenceLengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type times(timesSEXP);
    Rcpp::traits::input_parameter< const List >::type Fs(FsSEXP);
    Rcpp::traits::input_parameter< const List >::type Gs(GsSEXP);
    Rcpp::traits::input_parameter< const List >::type Ys(YsSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type sortedSampleHeights(sortedSampleHeightsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type sortedSampleStates(sortedSampleStatesSEXP);
    Rcpp::traits::input_parameter< double >::type maxSampleTime(maxSampleTimeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< bool >::type finiteSizeCorrection(finiteSizeCorrectionSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type substitutionRates(substitutionRatesSEXP);
    Rcpp::traits::input_parameter< int >::type sequenceLength(sequenceLengthSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateTreeCpp3x0(times, Fs, Gs, Ys, sortedSampleHeights, sortedSampleStates, maxSampleTime, m, finiteSizeCorrection, substitutionRates, sequenceLength));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_phydynR_rco_finite_size_correction2", (DL_FUNC) &_phydynR_rco_finite_size_correction2, 5},
    {"_phydynR_eventTimes2extant", (DL_FUNC) &_phydynR_eventTimes2extant, 3},
    {"_phydynR_update_alpha0", (DL_FUNC) &_phydynR_update_alpha0, 5},
    {"_phydynR_update_states0", (DL_FUNC) &_phydynR_update_states0, 2},
    {"_phydynR_update_states1", (DL_FUNC) &_phydynR_update_states1, 3},
    {"_phydynR_dAL", (DL_FUNC) &_phydynR_dAL, 3},
    {"_phydynR_solvePikL0", (DL_FUNC) &_phydynR_solvePikL0, 8},
    {"_phydynR_solvePikL1", (DL_FUNC) &_phydynR_solvePikL1, 8},
    {"_phydynR_dQL", (DL_FUNC) &_phydynR_dQL, 5},
    {"_phydynR_solveQfwd0", (DL_FUNC) &_phydynR_solveQfwd0, 8},
    {"_phydynR_updateWCpp", (DL_FUNC) &_phydynR_updateWCpp, 6},
    {"_phydynR_sourceAttribMultiDemeCpp2", (DL_FUNC) &_phydynR_sourceAttribMultiDemeCpp2, 15},
    {"_phydynR_sourceAttribMultiDemeCpp", (DL_FUNC) &_phydynR_sourceAttribMultiDemeCpp, 14},
    {"_phydynR_solveQALboost0", (DL_FUNC) &_phydynR_solveQALboost0, 8},
    {"_phydynR_solveQALboost1", (DL_FUNC) &_phydynR_solveQALboost1, 8},
    {"_phydynR_simulateTreeCpp2", (DL_FUNC) &_phydynR_simulateTreeCpp2, 12},
    {"_phydynR_simulateTreeCpp3x0", (DL_FUNC) &_phydynR_simulateTreeCpp3x0, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_phydynR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
